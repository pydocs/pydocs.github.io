{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "To remove in the future \u2013\u2013 scipy.optimize.nonlin"
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/scipy/optimize/nonlin.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "aliases": [
    "scipy.signal.filter_design.optimize.nonlin"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "1.7.1",
  "signature": null,
  "references": null,
  "logo": "logo.png",
  "qa": "scipy.optimize.nonlin",
  "arbitrary": [
    {
      "children": [
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "currentmodule",
            "args0": [],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "scipy.optimize "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This is a collection of general-purpose nonlinear multidimensional solvers. These solvers find "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "x"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " for which "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "F(x) = 0"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". Both "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "x"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "F"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " can be multidimensional."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Nonlinear solvers"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Large-scale nonlinear solvers:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "autosummary",
            "args0": [],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "newton_krylov anderson "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "General nonlinear solvers:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "autosummary",
            "args0": [],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "broyden1 broyden2 "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Simple iterations:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "autosummary",
            "args0": [],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "excitingmixing linearmixing diagbroyden "
                  }
                }
              ],
              "inner": []
            }
          }
        }
      ],
      "title": "Routines"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Strong",
                "data": {
                  "content": {
                    "value": "Small problem"
                  }
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> def F(x):",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "...    return np.cos(x) + x[::-1] - [1, 2, 3, 4]",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": ">>> import scipy.optimize",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": ">>> x = scipy.optimize.broyden1(F, [1,1,1,1], f_tol=1e-14)",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": ">>> x",
                  "_number": 4,
                  "_offset": 0
                },
                {
                  "_line": "array([ 4.04674914,  3.91158389,  2.71791677,  1.61756251])",
                  "_number": 5,
                  "_offset": 0
                },
                {
                  "_line": ">>> np.cos(x) + x[::-1]",
                  "_number": 6,
                  "_offset": 0
                },
                {
                  "_line": "array([ 1.,  2.,  3.,  4.])",
                  "_number": 7,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Strong",
                "data": {
                  "content": {
                    "value": "Large problem"
                  }
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Suppose that we needed to solve the following integrodifferential equation on the square "
                }
              },
              {
                "type": "Math",
                "data": {
                  "value": [
                    "[0,1]\\times[0,1]"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ":"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockMath",
          "data": {
            "value": "\\nabla^2 P = 10 \\left ( \\int_0^1\\int_0^1\\cosh ( P)\\,dx\\,dy\\right)^2 "
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "with "
                }
              },
              {
                "type": "Math",
                "data": {
                  "value": [
                    "P(x,1) = 1"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Math",
                "data": {
                  "value": [
                    "P=0"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " elsewhere on the boundary of the square."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The solution can be found using the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "newton_krylov"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " solver:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "plot",
            "args0": [],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "import numpy as np from scipy.optimize import newton_krylov from numpy import cosh, zeros_like, mgrid, zeros # parameters nx, ny = 75, 75 hx, hy = 1. / ( nx - 1), 1. / ( ny - 1) P_left, P_right = 0, 0 P_top, P_bottom = 1, 0 def residual ( P) : d2x = zeros_like ( P) d2y = zeros_like ( P) d2x [ 1 : - 1] = ( P [ 2 : ] - 2*P [ 1 : - 1] + P [ : - 2]) / hx / hx d2x [ 0] = ( P [ 1] - 2*P [ 0] + P_left) / hx / hx d2x [ - 1] = ( P_right - 2*P [ - 1] + P [ - 2]) / hx / hx d2y [ : ,1 : - 1] = ( P [ : ,2 : ] - 2*P [ : ,1 : - 1] + P [ : , : - 2]) / hy / hy d2y [ : ,0] = ( P [ : ,1] - 2*P [ : ,0] + P_bottom) / hy / hy d2y [ : , - 1] = ( P_top - 2*P [ : , - 1] + P [ : , - 2]) / hy / hy return d2x + d2y - 10*cosh ( P).mean ( )**2 # solve guess = zeros ( ( nx, ny), float) sol = newton_krylov ( residual, guess, method= ' lgmres ' , verbose=1) print ( ' Residual : %g ' % abs ( residual ( sol)).max ( )) # visualize import matplotlib.pyplot as plt x, y = mgrid [ 0 : 1 : ( nx*1j), 0 : 1 : ( ny*1j)] plt.pcolormesh ( x, y, sol, shading= ' gouraud ' ) plt.colorbar ( ) plt.show ( ) "
                  }
                }
              ],
              "inner": []
            }
          }
        }
      ],
      "title": "Examples"
    }
  ]
}