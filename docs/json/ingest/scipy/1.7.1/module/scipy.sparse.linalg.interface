{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This module defines a class hierarchy that implements a kind of \"lazy\" matrix representation, called the "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "LinearOperator"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". It can be used to do linear algebra with extremely large sparse or structured matrices, without representing those explicitly in memory. Such matrices can be added, multiplied, transposed, etc."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "As a motivating example, suppose you want have a matrix where almost all of the elements have the value one. The standard sparse matrix representation skips the storage of zeros, but not ones. By contrast, a LinearOperator is able to represent such matrices efficiently. First, we need a compact way to represent an all-ones matrix::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": ">>> import numpy as np\n>>> class Ones(LinearOperator):\n...     def __init__(self, shape):\n...         super().__init__(dtype=None, shape=shape)\n...     def _matvec(self, x):\n...         return np.repeat(x.sum(), self.shape[0])"
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Instances of this class emulate "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "np.ones(shape)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", but using a constant amount of storage, independent of "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "shape"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". The "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_matvec"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " method specifies how this linear operator multiplies with (operates on) a vector. We can now add this operator to a sparse matrix that stores only offsets from one::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": ">>> from scipy.sparse import csr_matrix\n>>> offsets = csr_matrix([[1, 0, 2], [0, -1, 0], [0, 0, 3]])\n>>> A = aslinearoperator(offsets) + Ones(offsets.shape)\n>>> A.dot([1, 2, 3])\narray([13,  4, 15])"
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The result is the same as that given by its dense, explicitly-stored counterpart::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": ">>> (np.ones(A.shape, A.dtype) + offsets.toarray()).dot([1, 2, 3])\narray([13,  4, 15])"
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Several algorithms in the "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "scipy.sparse"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " library are able to operate on "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "LinearOperator"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " instances."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Abstract linear algebra library."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/scipy/sparse/linalg/interface.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "aliases": [
    "scipy.signal.filter_design.optimize._differentiable_functions.sps.linalg.interface"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "1.7.1",
  "signature": null,
  "references": null,
  "logo": "logo.png",
  "qa": "scipy.sparse.linalg.interface",
  "arbitrary": [
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Abstract linear algebra library."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This module defines a class hierarchy that implements a kind of \"lazy\" matrix representation, called the "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "LinearOperator"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". It can be used to do linear algebra with extremely large sparse or structured matrices, without representing those explicitly in memory. Such matrices can be added, multiplied, transposed, etc."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "As a motivating example, suppose you want have a matrix where almost all of the elements have the value one. The standard sparse matrix representation skips the storage of zeros, but not ones. By contrast, a LinearOperator is able to represent such matrices efficiently. First, we need a compact way to represent an all-ones matrix::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": ">>> import numpy as np\n>>> class Ones(LinearOperator):\n...     def __init__(self, shape):\n...         super().__init__(dtype=None, shape=shape)\n...     def _matvec(self, x):\n...         return np.repeat(x.sum(), self.shape[0])"
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Instances of this class emulate "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "np.ones(shape)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", but using a constant amount of storage, independent of "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "shape"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". The "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_matvec"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " method specifies how this linear operator multiplies with (operates on) a vector. We can now add this operator to a sparse matrix that stores only offsets from one::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": ">>> from scipy.sparse import csr_matrix\n>>> offsets = csr_matrix([[1, 0, 2], [0, -1, 0], [0, 0, 3]])\n>>> A = aslinearoperator(offsets) + Ones(offsets.shape)\n>>> A.dot([1, 2, 3])\narray([13,  4, 15])"
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The result is the same as that given by its dense, explicitly-stored counterpart::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": ">>> (np.ones(A.shape, A.dtype) + offsets.toarray()).dot([1, 2, 3])\narray([13,  4, 15])"
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Several algorithms in the "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "scipy.sparse"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " library are able to operate on "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "LinearOperator"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " instances."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    }
  ]
}