{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Barycentric transform from "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "x"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " to "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "c"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is defined by::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": "T c = x - r_n"
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "where the "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "r_1, ..., r_n"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " are the vertices of the simplex. The matrix "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "T"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is defined by the condition::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": "T e_j = r_j - r_n"
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "where "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "e_j"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is the unit axis vector, e.g, "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "e_2 = [0,1,0,0,...]"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " This implies that "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "T_ij = (r_j - r_n)_i"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "For the barycentric transforms, we need to compute the inverse matrix "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "T^-1"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and store the vectors "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "r_n"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " for each vertex. These are stacked into the "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "Tinvs",
                  "reference": {
                    "module": null,
                    "version": null,
                    "kind": "local",
                    "path": "Tinvs"
                  },
                  "kind": "local",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " returned."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "Tinvs",
            "type_": "array, shape (nsimplex, ndim+1, ndim)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Barycentric transforms for each simplex."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Tinvs[i,:ndim,:ndim] contains inverse of the matrix ``T``, and Tinvs[i,ndim,:] contains the vector ``r_n`` (see below)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Compute barycentric affine coordinate transformations for given simplices."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Returns",
    "Notes"
  ],
  "item_file": null,
  "item_line": null,
  "item_type": "<class 'builtin_function_or_method'>",
  "aliases": [
    "scipy.signal.ltisys.interpolate.interpnd.qhull._get_barycentric_transforms"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "1.7.1",
  "signature": null,
  "references": null,
  "logo": "logo.png",
  "qa": "scipy.spatial.qhull._get_barycentric_transforms",
  "arbitrary": []
}