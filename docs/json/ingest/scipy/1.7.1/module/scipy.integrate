{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "To remove in the future \u2013\u2013 scipy.integrate"
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/scipy/integrate/__init__.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "aliases": [
    "scipy.signal.ltisys.integrate"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "1.7.1",
  "signature": null,
  "references": null,
  "logo": "logo.png",
  "qa": "scipy.integrate",
  "arbitrary": [
    {
      "children": [
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "currentmodule",
            "args0": [],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "scipy.integrate "
                  }
                }
              ],
              "inner": []
            }
          }
        }
      ],
      "title": "Integration and ODEs (:mod:`scipy.integrate`)"
    },
    {
      "children": [
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "autosummary",
            "args0": [
              ":toctree: generated/"
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "quad - - General purpose integration quad_vec - - General purpose integration of vector - valued functions dblquad - - General purpose double integration tplquad - - General purpose triple integration nquad - - General purpose N - D integration fixed_quad - - Integrate func ( x) using Gaussian quadrature of order n quadrature - - Integrate with given tolerance using Gaussian quadrature romberg - - Integrate func using Romberg integration quad_explain - - Print information for use of quad newton_cotes - - Weights and error coefficient for Newton - Cotes integration IntegrationWarning - - Warning on issues during integration AccuracyWarning - - Warning on issues during quadrature integration "
                  }
                }
              ],
              "inner": []
            }
          }
        }
      ],
      "title": "Integrating functions, given function object"
    },
    {
      "children": [
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "autosummary",
            "args0": [
              ":toctree: generated/"
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "trapezoid - - Use trapezoidal rule to compute integral. cumulative_trapezoid - - Use trapezoidal rule to cumulatively compute integral. simpson - - Use Simpson ' s rule to compute integral from samples. romb - - Use Romberg Integration to compute integral from - - ( 2**k + 1) evenly - spaced samples. "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "seealso",
            "args0": [],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": ": mod : `scipy.special` for orthogonal polynomials ( special) for Gaussian quadrature roots and weights for other weighting factors and regions. "
                  }
                }
              ],
              "inner": []
            }
          }
        }
      ],
      "title": "Integrating functions, given fixed samples"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The solvers are implemented as individual classes, which can be used directly (low-level usage) or through a convenience function."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "autosummary",
            "args0": [
              ":toctree: generated/"
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "solve_ivp - - Convenient function for ODE integration. RK23 - - Explicit Runge - Kutta solver of order 3 ( 2). RK45 - - Explicit Runge - Kutta solver of order 5 ( 4). DOP853 - - Explicit Runge - Kutta solver of order 8. Radau - - Implicit Runge - Kutta solver of order 5. BDF - - Implicit multi - step variable order ( 1 to 5) solver. LSODA - - LSODA solver from ODEPACK Fortran package. OdeSolver - - Base class for ODE solvers. DenseOutput - - Local interpolant for computing a dense output. OdeSolution - - Class which represents a continuous ODE solution. "
                  }
                }
              ],
              "inner": []
            }
          }
        }
      ],
      "title": "Solving initial value problems for ODE systems"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "These are the routines developed earlier for SciPy. They wrap older solvers implemented in Fortran (mostly ODEPACK). While the interface to them is not particularly convenient and certain features are missing compared to the new API, the solvers themselves are of good quality and work fast as compiled Fortran code. In some cases, it might be worth using this old API."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "autosummary",
            "args0": [
              ":toctree: generated/"
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "odeint - - General integration of ordinary differential equations. ode - - Integrate ODE using VODE and ZVODE routines. complex_ode - - Convert a complex - valued ODE to real - valued and integrate. "
                  }
                }
              ],
              "inner": []
            }
          }
        }
      ],
      "title": "Old API"
    },
    {
      "children": [
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "autosummary",
            "args0": [
              ":toctree: generated/"
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "solve_bvp - - Solve a boundary value problem for a system of ODEs. "
                  }
                }
              ],
              "inner": []
            }
          }
        }
      ],
      "title": "Solving boundary value problems for ODE systems"
    }
  ]
}