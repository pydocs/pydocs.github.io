{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "A",
            "type_": "{sparse matrix, dense matrix, LinearOperator}",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The real or complex N-by-N matrix of the linear system. Alternatively, "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "A"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " can be a linear operator which can produce "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "Ax"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " using, e.g., "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "scipy.sparse.linalg.LinearOperator"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "b",
            "type_": "{array, matrix}",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Right hand side of the linear system. Has shape (N,) or (N,1)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "x0",
            "type_": "{array, matrix}",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Starting guess for the solution."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "tol, atol",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Tolerances for convergence, "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "norm(residual) <= max(tol*norm(b), atol)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". The default for "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "atol"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "tol",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "tol"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Admonition",
                "data": {
                  "kind": "warning",
                  "title": "",
                  "children": [
                    {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "The default value for `atol` will be changed in a future release. For future compatibility, specify `atol` explicitly. "
                          }
                        }
                      ],
                      "inner": []
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "maxiter",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Maximum number of iterations.  Iteration will stop after maxiter steps even if the specified tolerance has not been achieved."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "M",
            "type_": "{sparse matrix, dense matrix, LinearOperator}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Preconditioner for A.  The preconditioner should approximate the inverse of A. gcrotmk is a 'flexible' algorithm and the preconditioner can vary from iteration to iteration. Effective preconditioning dramatically improves the rate of convergence, which implies that fewer iterations are needed to reach a given error tolerance."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "callback",
            "type_": "function, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "User-supplied function to call after each iteration.  It is called as callback(xk), where xk is the current solution vector."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "m",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Number of inner FGMRES iterations per each outer iteration. Default: 20"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "k",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Number of vectors to carry between inner FGMRES iterations. According to , good values are around m. Default: m"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "CU",
            "type_": "list of tuples, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "List of tuples "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "(c, u)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " which contain the columns of the matrices C and U in the GCROT(m,k) algorithm. For details, see . The list given and vectors contained in it are modified in-place. If not given, start from empty matrices. The "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "c"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " elements in the tuples can be "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "None"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", in which case the vectors are recomputed via "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "c = A u"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " on start and orthogonalized as described in ."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "discard_C",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Discard the C-vectors at the end. Useful if recycling Krylov subspaces for different linear systems."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "truncate",
            "type_": "{'oldest', 'smallest'}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Truncation scheme to use. Drop: oldest vectors, or vectors with smallest singular values using the scheme discussed in [1,2]. See  for detailed comparison. Default: 'oldest'"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "x",
            "type_": "array or matrix",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The solution found."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "info",
            "type_": "int",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Provides convergence information:"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Solve a matrix equation using flexible GCROT(m,k) algorithm."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "References"
  ],
  "item_file": "/scipy/sparse/linalg/isolve/_gcrotmk.py",
  "item_line": 182,
  "item_type": "<class 'function'>",
  "aliases": [
    "scipy.signal.filter_design.optimize._differentiable_functions.sps.linalg.gcrotmk"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "1.7.1",
  "signature": "gcrotmk(A, b, x0=None, tol=1e-05, maxiter=1000, M=None, callback=None, m=20, k=None, CU=None, discard_C=False, truncate='oldest', atol=None)",
  "references": null,
  "logo": "logo.png",
  "qa": "scipy.sparse.linalg.isolve._gcrotmk.gcrotmk",
  "arbitrary": []
}