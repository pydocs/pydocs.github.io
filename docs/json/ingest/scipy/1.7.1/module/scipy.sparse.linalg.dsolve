{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "To remove in the future \u2013\u2013 scipy.sparse.linalg.dsolve"
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/scipy/sparse/linalg/dsolve/__init__.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "aliases": [
    "scipy.signal.filter_design.optimize._differentiable_functions.sps.linalg.dsolve"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "1.7.1",
  "signature": null,
  "references": null,
  "logo": "logo.png",
  "qa": "scipy.sparse.linalg.dsolve",
  "arbitrary": [
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The default solver is SuperLU (included in the scipy distribution), which can solve real or complex linear systems in both single and double precisions.  It is automatically replaced by UMFPACK, if available.  Note that UMFPACK works in double precision only, so switch it off by::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> use_solver(useUmfpack=False)",
                  "_number": 0,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "to solve in the single precision. See also use_solver documentation."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Example session::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> from scipy.sparse import csc_matrix, spdiags",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": ">>> from numpy import array",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": ">>> from scipy.sparse.linalg import spsolve, use_solver",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": ">>>",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": ">>> print(\"Inverting a sparse linear system:\")",
                  "_number": 4,
                  "_offset": 0
                },
                {
                  "_line": ">>> print(\"The sparse matrix (constructed from diagonals):\")",
                  "_number": 5,
                  "_offset": 0
                },
                {
                  "_line": ">>> a = spdiags([[1, 2, 3, 4, 5], [6, 5, 8, 9, 10]], [0, 1], 5, 5)",
                  "_number": 6,
                  "_offset": 0
                },
                {
                  "_line": ">>> b = array([1, 2, 3, 4, 5])",
                  "_number": 7,
                  "_offset": 0
                },
                {
                  "_line": ">>> print(\"Solve: single precision complex:\")",
                  "_number": 8,
                  "_offset": 0
                },
                {
                  "_line": ">>> use_solver( useUmfpack = False )",
                  "_number": 9,
                  "_offset": 0
                },
                {
                  "_line": ">>> a = a.astype('F')",
                  "_number": 10,
                  "_offset": 0
                },
                {
                  "_line": ">>> x = spsolve(a, b)",
                  "_number": 11,
                  "_offset": 0
                },
                {
                  "_line": ">>> print(x)",
                  "_number": 12,
                  "_offset": 0
                },
                {
                  "_line": ">>> print(\"Error: \", a*x-b)",
                  "_number": 13,
                  "_offset": 0
                },
                {
                  "_line": ">>>",
                  "_number": 14,
                  "_offset": 0
                },
                {
                  "_line": ">>> print(\"Solve: double precision complex:\")",
                  "_number": 15,
                  "_offset": 0
                },
                {
                  "_line": ">>> use_solver( useUmfpack = True )",
                  "_number": 16,
                  "_offset": 0
                },
                {
                  "_line": ">>> a = a.astype('D')",
                  "_number": 17,
                  "_offset": 0
                },
                {
                  "_line": ">>> x = spsolve(a, b)",
                  "_number": 18,
                  "_offset": 0
                },
                {
                  "_line": ">>> print(x)",
                  "_number": 19,
                  "_offset": 0
                },
                {
                  "_line": ">>> print(\"Error: \", a*x-b)",
                  "_number": 20,
                  "_offset": 0
                },
                {
                  "_line": ">>>",
                  "_number": 21,
                  "_offset": 0
                },
                {
                  "_line": ">>> print(\"Solve: double precision:\")",
                  "_number": 22,
                  "_offset": 0
                },
                {
                  "_line": ">>> a = a.astype('d')",
                  "_number": 23,
                  "_offset": 0
                },
                {
                  "_line": ">>> x = spsolve(a, b)",
                  "_number": 24,
                  "_offset": 0
                },
                {
                  "_line": ">>> print(x)",
                  "_number": 25,
                  "_offset": 0
                },
                {
                  "_line": ">>> print(\"Error: \", a*x-b)",
                  "_number": 26,
                  "_offset": 0
                },
                {
                  "_line": ">>>",
                  "_number": 27,
                  "_offset": 0
                },
                {
                  "_line": ">>> print(\"Solve: single precision:\")",
                  "_number": 28,
                  "_offset": 0
                },
                {
                  "_line": ">>> use_solver( useUmfpack = False )",
                  "_number": 29,
                  "_offset": 0
                },
                {
                  "_line": ">>> a = a.astype('f')",
                  "_number": 30,
                  "_offset": 0
                },
                {
                  "_line": ">>> x = spsolve(a, b.astype('f'))",
                  "_number": 31,
                  "_offset": 0
                },
                {
                  "_line": ">>> print(x)",
                  "_number": 32,
                  "_offset": 0
                },
                {
                  "_line": ">>> print(\"Error: \", a*x-b)",
                  "_number": 33,
                  "_offset": 0
                }
              ]
            }
          }
        }
      ],
      "title": "Linear Solvers"
    }
  ]
}