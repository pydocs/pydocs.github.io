{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "disp",
            "type_": "bool",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Set to True to print convergence messages."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "maxiter, maxfev",
            "type_": "int",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Maximum allowed number of iterations and function evaluations. Will default to "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "N*200"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", where "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "N"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is the number of variables, if neither "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "maxiter",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "maxiter"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " or "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "maxfev",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "maxfev"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is set. If both "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "maxiter",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "maxiter"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "maxfev",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "maxfev"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are set, minimization will stop at the first reached."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "return_all",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Set to True to return a list of the best solution at each of the iterations."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "initial_simplex",
            "type_": "array_like of shape (N + 1, N)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Initial simplex. If given, overrides "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "x0"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "initial_simplex[j,:]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " should contain the coordinates of the jth vertex of the "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "N+1"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " vertices in the simplex, where "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "N"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is the dimension."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "xatol",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Absolute error in xopt between iterations that is acceptable for convergence."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "fatol",
            "type_": "number, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Absolute error in func(xopt) between iterations that is acceptable for convergence."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "adaptive",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Adapt algorithm parameters to dimensionality of problem. Useful for high-dimensional minimization ."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "bounds",
            "type_": "sequence or `Bounds`, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Bounds on variables. There are two ways to specify the bounds:"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "BlockQuote",
                "data": {
                  "value": [
                    "1. Instance of `Bounds` class.",
                    "2. Sequence of ``(min, max)`` pairs for each element in `x`. None",
                    "   is used to specify no bound."
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Note that this just clips all vertices in simplex based on the bounds."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Minimization of scalar function of one or more variables using the Nelder-Mead algorithm."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Parameters",
    "References"
  ],
  "item_file": "/scipy/optimize/optimize.py",
  "item_line": 593,
  "item_type": "<class 'function'>",
  "aliases": [
    "scipy.signal.filter_design.optimize._minimize._minimize_neldermead"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "1.7.1",
  "signature": "_minimize_neldermead(func, x0, args=(), callback=None, maxiter=None, maxfev=None, disp=False, return_all=False, initial_simplex=None, xatol=0.0001, fatol=0.0001, adaptive=False, bounds=None, **unknown_options)",
  "references": null,
  "logo": "logo.png",
  "qa": "scipy.optimize.optimize._minimize_neldermead",
  "arbitrary": []
}