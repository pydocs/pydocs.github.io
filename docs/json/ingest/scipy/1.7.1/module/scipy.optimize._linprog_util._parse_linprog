{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_parse_linprog"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " employs two main steps "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_check_sparse_inputs"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_clean_inputs"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_check_sparse_inputs"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " checks for sparsity in the provided constraints ("
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "A_ub"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and ``A_eq) and if these match the provided sparsity optional values."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "_clean inputs"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " checks of the provided inputs. If no violations are identified the objective vector, upper bound constraints, equality constraints, and simple bounds are returned in the expected format."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "lp",
            "type_": "A `scipy.optimize._linprog_util._LPProblem` consisting of the following fields:",
            "desc": [
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "c"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "c"
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    {
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "A_ub"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "A_ub"
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    {
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "b_ub"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "b_ub"
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    {
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "A_eq"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "A_eq"
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    {
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "b_eq"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "b_eq"
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    {
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "bounds"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "bounds"
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    {
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "x0"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "x0"
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "options",
            "type_": "dict",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A dictionary of solver options. All methods accept the following generic options:"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "BlockQuote",
                "data": {
                  "value": [
                    "maxiter : int",
                    "    Maximum number of iterations to perform.",
                    "disp : bool",
                    "    Set to True to print convergence messages."
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "For method-specific options, see "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": "show_options('linprog')",
                        "domain": null,
                        "role": "func"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "lp",
            "type_": "A `scipy.optimize._linprog_util._LPProblem` consisting of the following fields:",
            "desc": [
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "c"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "c"
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    {
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "A_ub"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "A_ub"
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    {
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "b_ub"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "b_ub"
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    {
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "A_eq"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "A_eq"
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    {
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "b_eq"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "b_eq"
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    {
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "bounds"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "bounds"
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    },
                    {
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "x0"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "x0"
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "options",
            "type_": "dict, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A dictionary of solver options. All methods accept the following generic options:"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "BlockQuote",
                "data": {
                  "value": [
                    "maxiter : int",
                    "    Maximum number of iterations to perform.",
                    "disp : bool",
                    "    Set to True to print convergence messages."
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "For method-specific options, see "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": "show_options('linprog')",
                        "domain": null,
                        "role": "func"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Parse the provided linear programming problem"
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns"
  ],
  "item_file": "/scipy/optimize/_linprog_util.py",
  "item_line": 896,
  "item_type": "<class 'function'>",
  "aliases": [
    "scipy.signal.filter_design.optimize._linprog._parse_linprog"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "1.7.1",
  "signature": "_parse_linprog(lp, options, meth)",
  "references": null,
  "logo": "logo.png",
  "qa": "scipy.optimize._linprog_util._parse_linprog",
  "arbitrary": []
}