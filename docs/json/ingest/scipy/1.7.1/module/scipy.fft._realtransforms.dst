{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "For a single dimension array "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "x"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "For "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "norm=\"backward\""
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", there is no scaling on the "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "dst",
                  "reference": {
                    "module": null,
                    "version": null,
                    "kind": "local",
                    "path": "dst"
                  },
                  "kind": "local",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and the "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "idst",
                  "reference": {
                    "module": "scipy",
                    "version": "1.7.1",
                    "kind": "module",
                    "path": "scipy.fft._realtransforms.idst"
                  },
                  "kind": "module",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is scaled by "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "1/N"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " where "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "N"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is the \"logical\" size of the DST. For "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "norm='ortho'"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " both directions are scaled by the same factor "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "1/sqrt(N)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "There are, theoretically, 8 types of the DST for different combinations of even/odd boundary conditions and boundary off sets , only the first 4 types are implemented in SciPy."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Strong",
                "data": {
                  "content": {
                    "value": "Type I"
                  }
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "There are several definitions of the DST-I; we use the following for "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "norm=\"backward\""
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". DST-I assumes the input is odd around "
                }
              },
              {
                "type": "Math",
                "data": {
                  "value": [
                    "n=-1"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Math",
                "data": {
                  "value": [
                    "n=N"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockMath",
          "data": {
            "value": "y_k = 2 \\sum_ { n=0}^ { N - 1} x_n \\sin\\left ( \\frac { \\pi ( k+1) ( n+1)} { N+1}\\right) "
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Note that the DST-I is only supported for input size > 1. The (unnormalized) DST-I is its own inverse, up to a factor "
                }
              },
              {
                "type": "Math",
                "data": {
                  "value": [
                    "2(N+1)"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". The orthonormalized DST-I is exactly its own inverse."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Strong",
                "data": {
                  "content": {
                    "value": "Type II"
                  }
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "There are several definitions of the DST-II; we use the following for "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "norm=\"backward\""
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". DST-II assumes the input is odd around "
                }
              },
              {
                "type": "Math",
                "data": {
                  "value": [
                    "n=-1/2"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Math",
                "data": {
                  "value": [
                    "n=N-1/2"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "; the output is odd around "
                }
              },
              {
                "type": "Math",
                "data": {
                  "value": [
                    "k=-1"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and even around "
                }
              },
              {
                "type": "Math",
                "data": {
                  "value": [
                    "k=N-1"
                  ]
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockMath",
          "data": {
            "value": "y_k = 2 \\sum_ { n=0}^ { N - 1} x_n \\sin\\left ( \\frac { \\pi ( k+1) ( 2n+1)} { 2N}\\right) "
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "if "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "norm='ortho'"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "y[k]"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is multiplied by a scaling factor "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "f"
                  ]
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockMath",
          "data": {
            "value": "f = \\begin { cases} \\sqrt { \\frac { 1} { 4N}} & \\text { if }k = 0, \\\\ \\sqrt { \\frac { 1} { 2N}} & \\text { otherwise} \\end { cases} "
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Strong",
                "data": {
                  "content": {
                    "value": "Type III"
                  }
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "There are several definitions of the DST-III, we use the following (for "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "norm=\"backward\""
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "). DST-III assumes the input is odd around "
                }
              },
              {
                "type": "Math",
                "data": {
                  "value": [
                    "n=-1"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and even around "
                }
              },
              {
                "type": "Math",
                "data": {
                  "value": [
                    "n=N-1"
                  ]
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockMath",
          "data": {
            "value": "y_k = ( - 1)^k x_ { N - 1} + 2 \\sum_ { n=0}^ { N - 2} x_n \\sin\\left ( \\frac { \\pi ( 2k+1) ( n+1)} { 2N}\\right) "
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The (unnormalized) DST-III is the inverse of the (unnormalized) DST-II, up to a factor "
                }
              },
              {
                "type": "Math",
                "data": {
                  "value": [
                    "2N"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". The orthonormalized DST-III is exactly the inverse of the orthonormalized DST-II."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Strong",
                "data": {
                  "content": {
                    "value": "Type IV"
                  }
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "There are several definitions of the DST-IV, we use the following (for "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "norm=\"backward\""
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "). DST-IV assumes the input is odd around "
                }
              },
              {
                "type": "Math",
                "data": {
                  "value": [
                    "n=-0.5"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and even around "
                }
              },
              {
                "type": "Math",
                "data": {
                  "value": [
                    "n=N-0.5"
                  ]
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockMath",
          "data": {
            "value": "y_k = 2 \\sum_ { n=0}^ { N - 1} x_n \\sin\\left ( \\frac { \\pi ( 2k+1) ( 2n+1)} { 4N}\\right) "
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The (unnormalized) DST-IV is its own inverse, up to a factor "
                }
              },
              {
                "type": "Math",
                "data": {
                  "value": [
                    "2N"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". The orthonormalized DST-IV is exactly its own inverse."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "x",
            "type_": "array_like",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The input array."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "type",
            "type_": "{1, 2, 3, 4}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Type of the DST (see Notes). Default type is 2."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "n",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Length of the transform. If "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "n < x.shape[axis]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "x",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "x"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is truncated.  If "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "n > x.shape[axis]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "x",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "x"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is zero-padded. The default results in "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "n = x.shape[axis]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "axis",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Axis along which the dst is computed; the default is over the last axis (i.e., "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "axis=-1"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ")."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "norm",
            "type_": "{\"backward\", \"ortho\", \"forward\"}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Normalization mode (see Notes). Default is \"backward\"."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "overwrite_x",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If True, the contents of "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "x",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "x"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " can be destroyed; the default is False."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "workers",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Maximum number of workers to use for parallel computation. If negative, the value wraps around from "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "os.cpu_count()"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". See "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~scipy.fft.fft"
                        ],
                        "domain": null,
                        "role": "func"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " for more details."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "dst",
            "type_": "ndarray of reals",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The transformed input array."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Return the Discrete Sine Transform of arbitrary type sequence x."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    {
      "module": "scipy",
      "version": "1.7.1",
      "kind": "module",
      "path": "scipy.fft._realtransforms.idst"
    }
  ],
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "References"
  ],
  "item_file": "/scipy/fft/_realtransforms.py",
  "item_line": 460,
  "item_type": "<class 'uarray._Function'>",
  "aliases": [
    "scipy.signal.filter_design.sp_fft.dst"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [
    {
      "name": {
        "name": "idst",
        "ref": "scipy.fft._realtransforms.idst",
        "exists": true
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Inverse DST"
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    }
  ],
  "version": "1.7.1",
  "signature": "dst(x, type=2, n=None, axis=-1, norm=None, overwrite_x=False, workers=None)",
  "references": null,
  "logo": "logo.png",
  "qa": "scipy.fft._realtransforms.dst",
  "arbitrary": []
}