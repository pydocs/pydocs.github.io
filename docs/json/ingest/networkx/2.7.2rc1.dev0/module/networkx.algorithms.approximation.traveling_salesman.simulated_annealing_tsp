Ÿ™ç≠jAttributesŸØÇÄˆpExtended SummaryŸØÇÇŸπÇÉŸßÅy±This function uses simulated annealing to approximate the minimal cost cycle through the nodes. Starting from a suboptimal solution, simulated annealing perturbs that solution, occasionally accepting changes that make the solution worse to escape from a locally optimal solution. The chance of accepting such changes decreases over the iterations to encourage an optimal result.  In summary, the function returns a cycle starting at Ÿ¢ÑfsourceŸ†ÑˆˆelocalfsourceelocalıŸßÅxA for which the total cost is minimized. It also returns the cost.ÄŸπÇÅŸßÅxÔThe chance of accepting a proposed change is related to a parameter called the temperature (annealing has a physical analogue of steel hardening as it cools). As the temperature is reduced, the chance of moves that increase cost goes down.ÄˆgMethodsŸØÇÄˆeNotesŸØÇÖŸπÇÅŸßÅxÓSimulated Annealing is a metaheuristic local search algorithm. The main characteristic of this algorithm is that it accepts even solutions which lead to the increase of the cost in order to escape from low quality local optimal solutions.ÄŸπÇÅŸßÅyThis algorithm needs an initial solution. If not provided, it is constructed by a simple greedy algorithm. At every iteration, the algorithm selects thoughtfully a neighbor solution. Consider $c(x)$ cost of current solution and $c(x')$ cost of a neighbor solution. If $c(x') - c(x) <= 0$ then the neighbor solution becomes the current solution for the next iteration. Otherwise, the algorithm accepts the neighbor solution with probability $p = exp - ([c(x') - c(x)] / temp)$. Otherwise the current solution is retained.ÄŸπÇÇŸ¢ÑdtempŸ†ÑˆˆelocaldtempelocalıŸßÅx< is a parameter of the algorithm and represents temperature.ÄŸπÇÉŸßÅxèTime complexity: For $N_i$ iterations of the inner loop and $N_o$ iterations of the outer loop, this algorithm has running time $O(N_i * N_o * Ÿ…Åc|V|ŸßÅc)$.ÄŸπÇÅŸßÅxlFor more information and how the algorithm is inspired see: http://en.wikipedia.org/wiki/Simulated_annealingÄˆpOther ParametersŸØÇÄˆjParametersŸØÇäŸ∞ÉaGeGraphÅŸπÇÇŸ¢ÑaGŸ†ÑˆˆelocalaGelocalıŸßÅxl should be a complete weighted undirected graph. The distance between all pairs of nodes should be included.ÄŸ∞Éjinit_cyclexlist of all nodes or "greedy"ÅŸπÇâŸßÅxìThe initial solution (a cycle through all nodes returning to the start). This argument has no default to make you think about it. If "greedy", use Ÿ£Éugreedy_tsp(G, weight)ˆˆŸßÅx#. Other common starting cycles are Ÿ£Éxlist(G) + [next(iter(G))]ˆˆŸßÅx or the final result of Ÿ¢Ñwsimulated_annealing_tspŸ†Ñhnetworkxm2.7.2rc1.dev0fmodulexLnetworkx.algorithms.approximation.traveling_salesman.simulated_annealing_tspfmoduleıŸßÅl when doing Ÿ¢Ñwthreshold_accepting_tspŸ†Ñhnetworkxm2.7.2rc1.dev0fmodulexLnetworkx.algorithms.approximation.traveling_salesman.threshold_accepting_tspfmoduleıŸßÅa.ÄŸ∞Éfweightx#string, optional (default="weight")ÅŸπÇÅŸßÅxpEdge data key corresponding to the edge weight. If any edge does not have this attribute the weight is set to 1.ÄŸ∞Éfsourcex/node, optional (default: first node in list(G))ÅŸπÇÇŸßÅx%Starting node.  If None, defaults to Ÿ°ÅÅmnext(iter(G))ÄŸ∞Édtempxint, optional (default=100)ÅŸπÇÅŸßÅxUThe algorithm's temperature parameter. It represents the initial value of temperatureÄŸ∞Édmovex4"1-1" or "1-0" or function, optional (default="1-1")ÉŸπÇÅŸßÅxlIndicator of what move to use when finding new trial solutions. Strings indicate two special built-in moves:ÄŸ»ÅÇŸπÇÜŸßÅxv"1-1": 1-1 exchange which transposes the position   of two elements of the current solution.   The function called is Ÿ£Énswap_two_nodesˆdfuncŸßÅx;.   For example if we apply 1-1 exchange in the solution   Ÿ°ÅÅsA = [3, 2, 1, 4, 3]ŸßÅxH   we can get the following by the transposition of 1 and 4 elements:   Ÿ°ÅÅtA' = [3, 2, 4, 1, 3]ÄŸπÇÜŸßÅxf"1-0": 1-0 exchange which moves an node in the solution   to a new position.   The function called is Ÿ£Émmove_one_nodeˆdfuncŸßÅx;.   For example if we apply 1-0 exchange in the solution   Ÿ°ÅÅsA = [3, 2, 1, 4, 3]ŸßÅx@   we can transfer the fourth element to the second position:   Ÿ°ÅÅtA' = [3, 4, 2, 1, 3]ÄŸπÇÖŸßÅxóYou may provide your own functions to enact a move from one solution to a neighbor solution. The function must take the solution as input along with a Ÿ¢ÑdseedŸ†ÑˆˆelocaldseedelocalıŸßÅx4 input to control random number generation (see the Ÿ¢ÑdseedŸ†ÑˆˆelocaldseedelocalıŸßÅxØ input here). Your function should maintain the solution as a cycle with equal first and last node and all others appearing once. Your function should return the new solution.ÄŸ∞Énmax_iterationsxint, optional (default=10)ÅŸπÇÅŸßÅxDeclared done when this number of consecutive iterations of the outer loop occurs without any change in the best cost solution.ÄŸ∞ÉgN_innerxint, optional (default=100)ÅŸπÇÅŸßÅx+The number of iterations of the inner loop.ÄŸ∞Éealphax-float between (0, 1), optional (default=0.01)ÅŸπÇÅŸßÅxBPercentage of temperature decrease in each iteration of outer loopÄŸ∞Édseedx(integer, random_state, or None (default)ÅŸπÇÉŸßÅx1Indicator of random number generation state. See Ÿ£ÉvRandomness<randomness>ˆcrefŸßÅa.ÄˆfRaisesŸØÇÅŸ∞É`mNetworkXErrorÅŸπÇÉŸßÅcIf Ÿ¢ÑaGŸ†ÑˆˆelocalaGelocalıŸßÅx3 is not complete the algorithm raises an exception.ÄˆhReceivesŸØÇÄˆgReturnsŸØÇÅŸ∞Éecyclemlist of nodesÅŸπÇÅŸßÅxbReturns the cycle (list of nodes) that a salesman can follow to minimize total weight of the trip.ÄˆgSummaryŸØÇÅŸπÇÅŸßÅxBReturns an approximate solution to the traveling salesman problem.ÄˆhWarningsŸØÇÄˆeWarnsŸØÇÄˆfYieldsŸØÇÄˆágSummarypExtended SummaryjParametersgReturnsfRaiseshExampleseNotesx7networkx/algorithms/approximation/traveling_salesman.py°r<class 'function'>Åx.networkx.approximation.simulated_annealing_tspŸØÇÑŸ¥ÉôŸ±ÇbkndfromŸ±Ç`a Ÿ±ÇbnnŸ¢ÑhnetworkxŸ†Ñhnetworkxm2.7.2rc1.dev0fmodulehnetworkxfmoduleıŸ±Çbnna.Ÿ±ÇbnnŸ¢ÑjalgorithmsŸ†Ñhnetworkxm2.7.2rc1.dev0fmodulesnetworkx.algorithmsfmoduleıŸ±Ç`a Ÿ±ÇbknfimportŸ±Ç`a Ÿ±Ç`Ÿ¢ÑmapproximationŸ†Ñhnetworkxm2.7.2rc1.dev0fmodulex!networkx.algorithms.approximationfmoduleıŸ±Ç`a Ÿ±ÇakbasŸ±Ç`a Ÿ±Ç`fapproxŸ±Ç`a
Ÿ±Ç`aGŸ±Ç`a Ÿ±Çaoa=Ÿ±Ç`a Ÿ±Ç`bnxŸ±Çaoa.Ÿ±Ç`Ÿ¢ÑgDiGraphŸ†Ñhnetworkxm2.7.2rc1.dev0fmodulex networkx.classes.digraph.DiGraphfmoduleıŸ±Ç`a(Ÿ±Ç`a)Ÿ±Ç`a
Ÿ±Ç`aGŸ±Çaoa.Ÿ±Ç`Ÿ¢Ñwadd_weighted_edges_fromŸ†Ñhnetworkxm2.7.2rc1.dev0fmodulex4networkx.classes.graph.Graph.add_weighted_edges_fromfmoduleıŸ±Ç`a(Ÿ±Ç`a{Ÿ±Ç`a
Ÿ±Ç`d    Ÿ±Ç`a(Ÿ±Çbs2a"Ÿ±Çbs2aAŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbs2a"Ÿ±Çbs2aBŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±ÇbmiŸ¢Ña3Ÿ†Ñhnetworkxm2.7.2rc1.dev0fmodulex?networkx.generators.degree_seq.DegreeSequenceRandomGraph.phase3fmoduleıŸ±Ç`a)Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Ç`a(Ÿ±Çbs2a"Ÿ±Çbs2aAŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbs2a"Ÿ±Çbs2aCŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbmib17Ÿ±Ç`a)Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Ç`a(Ÿ±Çbs2a"Ÿ±Çbs2aAŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbs2a"Ÿ±Çbs2aDŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbmib14Ÿ±Ç`a)Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Ç`a(Ÿ±Çbs2a"Ÿ±Çbs2aBŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbs2a"Ÿ±Çbs2aAŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±ÇbmiŸ¢Ña3Ÿ†Ñhnetworkxm2.7.2rc1.dev0fmodulex?networkx.generators.degree_seq.DegreeSequenceRandomGraph.phase3fmoduleıŸ±Ç`a)Ÿ±Ç`a,Ÿ±Ç`a
Ÿ±Ç`d    Ÿ±Ç`a(Ÿ±Çbs2a"Ÿ±Çbs2aBŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbs2a"Ÿ±Çbs2aCŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbmib12Ÿ±Ç`a)Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Ç`a(Ÿ±Çbs2a"Ÿ±Çbs2aBŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbs2a"Ÿ±Çbs2aDŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbmib16Ÿ±Ç`a)Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Ç`a(Ÿ±Çbs2a"Ÿ±Çbs2aCŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbs2a"Ÿ±Çbs2aAŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbmib13Ÿ±Ç`a)Ÿ±Ç`a,Ÿ±Ç`a(Ÿ±Çbs2a"Ÿ±Çbs2aCŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbs2a"Ÿ±Çbs2aBŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbmib12Ÿ±Ç`a)Ÿ±Ç`a,Ÿ±Ç`a
Ÿ±Ç`d    Ÿ±Ç`a(Ÿ±Çbs2a"Ÿ±Çbs2aCŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbs2a"Ÿ±Çbs2aDŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbmia4Ÿ±Ç`a)Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Ç`a(Ÿ±Çbs2a"Ÿ±Çbs2aDŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbs2a"Ÿ±Çbs2aAŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbmib14Ÿ±Ç`a)Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Ç`a(Ÿ±Çbs2a"Ÿ±Çbs2aDŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbs2a"Ÿ±Çbs2aBŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbmib15Ÿ±Ç`a)Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Ç`a(Ÿ±Çbs2a"Ÿ±Çbs2aDŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbs2a"Ÿ±Çbs2aCŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbmia2Ÿ±Ç`a)Ÿ±Ç`a
Ÿ±Ç`a}Ÿ±Ç`a)Ÿ±Ç`a
Ÿ±Ç`ecycleŸ±Ç`a Ÿ±Çaoa=Ÿ±Ç`a Ÿ±Ç`fapproxŸ±Çaoa.Ÿ±Ç`Ÿ¢Ñwsimulated_annealing_tspŸ†Ñhnetworkxm2.7.2rc1.dev0fmodulexLnetworkx.algorithms.approximation.traveling_salesman.simulated_annealing_tspfmoduleıŸ±Ç`a(Ÿ±Ç`aGŸ±Ç`a,Ÿ±Ç`a Ÿ±Çbs2a"Ÿ±Çbs2fgreedyŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Ç`fsourceŸ±Çaoa=Ÿ±Çbs2a"Ÿ±Çbs2aDŸ±Çbs2a"Ÿ±Ç`a)Ÿ±Ç`a
Ÿ±Ç`dcostŸ±Ç`a Ÿ±Çaoa=Ÿ±Ç`a Ÿ±ÇbnbcsumŸ±Ç`a(Ÿ±Ç`aGŸ±Ç`a[Ÿ±Ç`anŸ±Ç`a]Ÿ±Ç`a[Ÿ±Ç`cnbrŸ±Ç`a]Ÿ±Ç`a[Ÿ±Çbs2a"Ÿ±Çbs2fweightŸ±Çbs2a"Ÿ±Ç`a]Ÿ±Ç`a Ÿ±ÇakcforŸ±Ç`a Ÿ±Ç`anŸ±Ç`a,Ÿ±Ç`a Ÿ±Ç`cnbrŸ±Ç`a Ÿ±ÇbowbinŸ±Ç`a Ÿ±Ç`bnxŸ±Çaoa.Ÿ±Ç`Ÿ¢ÑeutilsŸ†Ñhnetworkxm2.7.2rc1.dev0fmodulennetworkx.utilsfmoduleıŸ±Çaoa.Ÿ±Ç`Ÿ¢ÑhpairwiseŸ†Ñhnetworkxm2.7.2rc1.dev0fmodulexnetworkx.utils.misc.pairwisefmoduleıŸ±Ç`a(Ÿ±Ç`ecycleŸ±Ç`a)Ÿ±Ç`a)Ÿ±Ç`a
Ÿ±Ç`ecyclex['D', 'C', 'B', 'A', 'D']fexecedŸ¥ÉÅŸ±Ç`dcostb31fexecedŸ¥ÉòZŸ±Ç`gincycleŸ±Ç`a Ÿ±Çaoa=Ÿ±Ç`a Ÿ±Ç`a[Ÿ±Çbs2a"Ÿ±Çbs2aDŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbs2a"Ÿ±Çbs2aBŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbs2a"Ÿ±Çbs2aAŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbs2a"Ÿ±Çbs2aCŸ±Çbs2a"Ÿ±Ç`a,Ÿ±Ç`a Ÿ±Çbs2a"Ÿ±Çbs2aDŸ±Çbs2a"Ÿ±Ç`a]Ÿ±Ç`a
Ÿ±Ç`ecycleŸ±Ç`a Ÿ±Çaoa=Ÿ±Ç`a Ÿ±Ç`fapproxŸ±Çaoa.Ÿ±Ç`Ÿ¢Ñwsimulated_annealing_tspŸ†Ñhnetworkxm2.7.2rc1.dev0fmodulexLnetworkx.algorithms.approximation.traveling_salesman.simulated_annealing_tspfmoduleıŸ±Ç`a(Ÿ±Ç`aGŸ±Ç`a,Ÿ±Ç`a Ÿ±Ç`gincycleŸ±Ç`a,Ÿ±Ç`a Ÿ±Ç`fsourceŸ±Çaoa=Ÿ±Çbs2a"Ÿ±Çbs2aDŸ±Çbs2a"Ÿ±Ç`a)Ÿ±Ç`a
Ÿ±Ç`dcostŸ±Ç`a Ÿ±Çaoa=Ÿ±Ç`a Ÿ±ÇbnbcsumŸ±Ç`a(Ÿ±Ç`aGŸ±Ç`a[Ÿ±Ç`anŸ±Ç`a]Ÿ±Ç`a[Ÿ±Ç`cnbrŸ±Ç`a]Ÿ±Ç`a[Ÿ±Çbs2a"Ÿ±Çbs2fweightŸ±Çbs2a"Ÿ±Ç`a]Ÿ±Ç`a Ÿ±ÇakcforŸ±Ç`a Ÿ±Ç`anŸ±Ç`a,Ÿ±Ç`a Ÿ±Ç`cnbrŸ±Ç`a Ÿ±ÇbowbinŸ±Ç`a Ÿ±Ç`bnxŸ±Çaoa.Ÿ±Ç`Ÿ¢ÑeutilsŸ†Ñhnetworkxm2.7.2rc1.dev0fmodulennetworkx.utilsfmoduleıŸ±Çaoa.Ÿ±Ç`Ÿ¢ÑhpairwiseŸ†Ñhnetworkxm2.7.2rc1.dev0fmodulexnetworkx.utils.misc.pairwisefmoduleıŸ±Ç`a(Ÿ±Ç`ecycleŸ±Ç`a)Ÿ±Ç`a)Ÿ±Ç`a
Ÿ±Ç`ecyclex['D', 'C', 'B', 'A', 'D']fexecedŸ¥ÉÅŸ±Ç`dcostb31fexecedˆÄm2.7.2rc1.dev0Ÿ´Åxësimulated_annealing_tsp(G, init_cycle, weight='weight', source=None, temp=100, move='1-1', max_iterations=10, N_inner=100, alpha=0.01, seed=None)ˆxLnetworkx.algorithms.approximation.traveling_salesman.simulated_annealing_tspÄ