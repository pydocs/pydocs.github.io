{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "New magic functions can be defined like so::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": "from IPython.core.magic_arguments import (argument, magic_arguments,\n    parse_argstring)\n\n@magic_arguments()\n@argument('-o', '--option', help='An optional argument.')\n@argument('arg', type=int, help='An integer positional argument.')\ndef magic_cool(self, arg):\n    \"\"\" A really cool magic command.\n\n\"\"\"\n    args = parse_argstring(magic_cool, arg)\n    ..."
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": "@magic_arguments",
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " decorator marks the function as having argparse arguments. The "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": "@argument",
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " decorator adds an argument using the same syntax as argparse's "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": "add_argument()",
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " method. More sophisticated uses may also require the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": "@argument_group",
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " or "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": "@kwds",
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " decorator to customize the formatting and the parsing."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Help text for the magic is automatically generated from the docstring and the arguments::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": "In[1]: %cool?\n    %cool [-o OPTION] arg\n\n    A really cool magic command.\n\n    positional arguments:\n      arg                   An integer positional argument.\n\n    optional arguments:\n      -o OPTION, --option OPTION\n                            An optional argument."
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Here is an elaborated example that uses default parameters in "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "argument",
                  "reference": {
                    "module": "IPython",
                    "version": "8.1.0.dev",
                    "kind": "module",
                    "path": "IPython.core.magic_arguments.argument"
                  },
                  "kind": "module",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and calls the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": "args",
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " in the cell magic::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": "from IPython.core.magic import register_cell_magic\nfrom IPython.core.magic_arguments import (argument, magic_arguments,\n                                        parse_argstring)\n\n@magic_arguments()\n@argument(\n    \"--option\",\n    \"-o\",\n    help=(\"Add an option here\"),\n)\n@argument(\n    \"--style\",\n    \"-s\",\n    default=\"foo\",\n    help=(\"Add some style arguments\"),\n)\n@register_cell_magic\ndef my_cell_magic(line, cell):\n    args = parse_argstring(my_cell_magic, line)\n    print(f\"{args.option=}\")\n    print(f\"{args.style=}\")\n    print(f\"{cell=}\")"
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "In a jupyter notebook, this cell magic can be executed like this::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": "%%my_cell_magic -o Hello\nprint(\"bar\")\ni = 42"
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Inheritance diagram:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "inheritance-diagram",
            "args0": [
              "IPython.core.magic_arguments"
            ],
            "inner": {
              "inline": [],
              "inner": []
            }
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "A decorator-based method of constructing IPython magics with "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": "argparse",
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " option handling."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    {
      "module": "IPython",
      "version": "8.1.0.dev",
      "kind": "module",
      "path": "IPython.core.magic_arguments.argument"
    }
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/dev/ipython/IPython/core/magic_arguments.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "aliases": [
    "IPython.core.magic_arguments"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "8.1.0.dev",
  "signature": null,
  "references": null,
  "logo": "logo.png",
  "qa": "IPython.core.magic_arguments",
  "arbitrary": [
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "A decorator-based method of constructing IPython magics with "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": "argparse",
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " option handling."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "New magic functions can be defined like so::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": "from IPython.core.magic_arguments import (argument, magic_arguments,\n    parse_argstring)\n\n@magic_arguments()\n@argument('-o', '--option', help='An optional argument.')\n@argument('arg', type=int, help='An integer positional argument.')\ndef magic_cool(self, arg):\n    \"\"\" A really cool magic command.\n\n\"\"\"\n    args = parse_argstring(magic_cool, arg)\n    ..."
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": "@magic_arguments",
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " decorator marks the function as having argparse arguments. The "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": "@argument",
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " decorator adds an argument using the same syntax as argparse's "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": "add_argument()",
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " method. More sophisticated uses may also require the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": "@argument_group",
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " or "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": "@kwds",
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " decorator to customize the formatting and the parsing."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Help text for the magic is automatically generated from the docstring and the arguments::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": "In[1]: %cool?\n    %cool [-o OPTION] arg\n\n    A really cool magic command.\n\n    positional arguments:\n      arg                   An integer positional argument.\n\n    optional arguments:\n      -o OPTION, --option OPTION\n                            An optional argument."
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Here is an elaborated example that uses default parameters in "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "argument",
                  "reference": {
                    "module": "IPython",
                    "version": "8.1.0.dev",
                    "kind": "module",
                    "path": "IPython.core.magic_arguments.argument"
                  },
                  "kind": "module",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and calls the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": "args",
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " in the cell magic::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": "from IPython.core.magic import register_cell_magic\nfrom IPython.core.magic_arguments import (argument, magic_arguments,\n                                        parse_argstring)\n\n\n@magic_arguments()\n@argument(\n    \"--option\",\n    \"-o\",\n    help=(\"Add an option here\"),\n)\n@argument(\n    \"--style\",\n    \"-s\",\n    default=\"foo\",\n    help=(\"Add some style arguments\"),\n)\n@register_cell_magic\ndef my_cell_magic(line, cell):\n    args = parse_argstring(my_cell_magic, line)\n    print(f\"{args.option=}\")\n    print(f\"{args.style=}\")\n    print(f\"{cell=}\")"
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "In a jupyter notebook, this cell magic can be executed like this::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": "%%my_cell_magic -o Hello\nprint(\"bar\")\ni = 42"
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Inheritance diagram:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "inheritance-diagram",
            "args0": [
              "IPython.core.magic_arguments"
            ],
            "inner": {
              "inline": [],
              "inner": []
            }
          }
        }
      ],
      "title": null
    }
  ]
}