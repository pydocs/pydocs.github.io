{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "BlockQuote",
          "data": {
            "value": [
              "%config Class[.trait=value]"
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This magic exposes most of the IPython config system. Any Configurable class should be able to be configured with the simple line::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "%config Class.trait=value",
                  "_number": 0,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Where "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "value"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " will be resolved in the user's namespace, if it is an expression or variable name."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "configure IPython"
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Examples"
  ],
  "item_file": "/dev/ipython/IPython/core/magics/config.py",
  "item_line": 35,
  "item_type": "<class 'function'>",
  "aliases": [
    "IPython.core.magics.ConfigMagics.config"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "To see what classes are available for config, pass no arguments::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            "In [1]: %config",
            "Available objects for config:",
            "    AliasManager",
            "    DisplayFormatter",
            "    HistoryManager",
            "    IPCompleter",
            "    LoggingMagics",
            "    MagicsManager",
            "    OSMagics",
            "    PrefilterManager",
            "    ScriptMagics",
            "    TerminalInteractiveShell"
          ]
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "To view what is configurable on a given class, just pass the class name::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            "In [2]: %config IPCompleter",
            "IPCompleter(Completer) options",
            "----------------------------",
            "IPCompleter.backslash_combining_completions=<Bool>",
            "    Enable unicode completions, e.g. \\alpha<tab> . Includes completion of latex",
            "    commands, unicode names, and expanding unicode characters back to latex",
            "    commands.",
            "    Current: True",
            "IPCompleter.debug=<Bool>",
            "    Enable debug for the Completer. Mostly print extra information for",
            "    experimental jedi integration.",
            "    Current: False",
            "IPCompleter.greedy=<Bool>",
            "    Activate greedy completion",
            "            PENDING DEPRECATION. this is now mostly taken care of with Jedi.",
            "            This will enable completion on elements of lists, results of function calls, etc.,",
            "            but can be unsafe because the code is actually evaluated on TAB.",
            "    Current: False",
            "IPCompleter.jedi_compute_type_timeout=<Int>",
            "    Experimental: restrict time (in milliseconds) during which Jedi can compute types.",
            "            Set to 0 to stop computing types. Non-zero value lower than 100ms may hurt",
            "            performance by preventing jedi to build its cache.",
            "    Current: 400",
            "IPCompleter.limit_to__all__=<Bool>",
            "    DEPRECATED as of version 5.0.",
            "    Instruct the completer to use __all__ for the completion",
            "    Specifically, when completing on ``object.<tab>``.",
            "    When True: only those names in obj.__all__ will be included.",
            "    When False [default]: the __all__ attribute is ignored",
            "    Current: False",
            "IPCompleter.merge_completions=<Bool>",
            "    Whether to merge completion results into a single list",
            "            If False, only the completion results from the first non-empty",
            "            completer will be returned.",
            "    Current: True",
            "IPCompleter.omit__names=<Enum>",
            "    Instruct the completer to omit private method names",
            "            Specifically, when completing on ``object.<tab>``.",
            "            When 2 [default]: all names that start with '_' will be excluded.",
            "            When 1: all 'magic' names (``__foo__``) will be excluded.",
            "            When 0: nothing will be excluded.",
            "    Choices: any of [0, 1, 2]",
            "    Current: 2",
            "IPCompleter.profile_completions=<Bool>",
            "    If True, emit profiling data for completion subsystem using cProfile.",
            "    Current: False",
            "IPCompleter.profiler_output_dir=<Unicode>",
            "    Template for path at which to output profile data for completions.",
            "    Current: '.completion_profiles'",
            "IPCompleter.use_jedi=<Bool>",
            "    Experimental: Use Jedi to generate autocompletions. Default to True if jedi",
            "    is installed.",
            "    Current: True"
          ]
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "but the real use is in setting values::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            "In [3]: %config IPCompleter.greedy = True"
          ]
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "and these values are read from the user_ns if they are variables::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            "In [4]: feeling_greedy=False"
          ]
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            "In [5]: %config IPCompleter.greedy = feeling_greedy"
          ]
        }
      }
    ],
    "title": null
  },
  "see_also": [],
  "version": "8.0.0.dev",
  "signature": "config(self, s)",
  "references": null,
  "logo": "logo.png",
  "qa": "IPython.core.magics.config.ConfigMagics.config",
  "arbitrary": []
}