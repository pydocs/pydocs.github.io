{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "New magic functions can be defined like so::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "from IPython.core.magic_arguments import (argument, magic_arguments,",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "    parse_argstring)",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "@magic_arguments()",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": "@argument('-o', '--option', help='An optional argument.')",
                  "_number": 4,
                  "_offset": 0
                },
                {
                  "_line": "@argument('arg', type=int, help='An integer positional argument.')",
                  "_number": 5,
                  "_offset": 0
                },
                {
                  "_line": "def magic_cool(self, arg):",
                  "_number": 6,
                  "_offset": 0
                },
                {
                  "_line": "    \"\"\" A really cool magic command.",
                  "_number": 7,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 8,
                  "_offset": 0
                },
                {
                  "_line": "\"\"\"",
                  "_number": 9,
                  "_offset": 0
                },
                {
                  "_line": "    args = parse_argstring(magic_cool, arg)",
                  "_number": 10,
                  "_offset": 0
                },
                {
                  "_line": "    ...",
                  "_number": 11,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "@magic_arguments"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " decorator marks the function as having argparse arguments. The "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "@argument"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " decorator adds an argument using the same syntax as argparse's "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "add_argument()"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " method. More sophisticated uses may also require the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "@argument_group"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " or "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "@kwds"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " decorator to customize the formatting and the parsing."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Help text for the magic is automatically generated from the docstring and the arguments::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "In[1]: %cool?",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "    %cool [-o OPTION] arg",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "    A really cool magic command.",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 4,
                  "_offset": 0
                },
                {
                  "_line": "    positional arguments:",
                  "_number": 5,
                  "_offset": 0
                },
                {
                  "_line": "      arg                   An integer positional argument.",
                  "_number": 6,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 7,
                  "_offset": 0
                },
                {
                  "_line": "    optional arguments:",
                  "_number": 8,
                  "_offset": 0
                },
                {
                  "_line": "      -o OPTION, --option OPTION",
                  "_number": 9,
                  "_offset": 0
                },
                {
                  "_line": "                            An optional argument.",
                  "_number": 10,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Inheritance diagram:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "inheritance-diagram",
            "args0": [
              "IPython.core.magic_arguments"
            ],
            "inner": {
              "inline": [],
              "inner": []
            }
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "A decorator-based method of constructing IPython magics with "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "argparse"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " option handling."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/dev/ipython/IPython/core/magic_arguments.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "aliases": [
    "IPython.core.magic_arguments"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "8.0.0.dev",
  "signature": null,
  "references": null,
  "logo": "logo.png",
  "qa": "IPython.core.magic_arguments",
  "arbitrary": [
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "A decorator-based method of constructing IPython magics with "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "argparse"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " option handling."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "New magic functions can be defined like so::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "from IPython.core.magic_arguments import (argument, magic_arguments,",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "    parse_argstring)",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "@magic_arguments()",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": "@argument('-o', '--option', help='An optional argument.')",
                  "_number": 4,
                  "_offset": 0
                },
                {
                  "_line": "@argument('arg', type=int, help='An integer positional argument.')",
                  "_number": 5,
                  "_offset": 0
                },
                {
                  "_line": "def magic_cool(self, arg):",
                  "_number": 6,
                  "_offset": 0
                },
                {
                  "_line": "    \"\"\" A really cool magic command.",
                  "_number": 7,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 8,
                  "_offset": 0
                },
                {
                  "_line": "\"\"\"",
                  "_number": 9,
                  "_offset": 0
                },
                {
                  "_line": "    args = parse_argstring(magic_cool, arg)",
                  "_number": 10,
                  "_offset": 0
                },
                {
                  "_line": "    ...",
                  "_number": 11,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "@magic_arguments"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " decorator marks the function as having argparse arguments. The "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "@argument"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " decorator adds an argument using the same syntax as argparse's "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "add_argument()"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " method. More sophisticated uses may also require the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "@argument_group"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " or "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "@kwds"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " decorator to customize the formatting and the parsing."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Help text for the magic is automatically generated from the docstring and the arguments::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "In[1]: %cool?",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "    %cool [-o OPTION] arg",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "    A really cool magic command.",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 4,
                  "_offset": 0
                },
                {
                  "_line": "    positional arguments:",
                  "_number": 5,
                  "_offset": 0
                },
                {
                  "_line": "      arg                   An integer positional argument.",
                  "_number": 6,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 7,
                  "_offset": 0
                },
                {
                  "_line": "    optional arguments:",
                  "_number": 8,
                  "_offset": 0
                },
                {
                  "_line": "      -o OPTION, --option OPTION",
                  "_number": 9,
                  "_offset": 0
                },
                {
                  "_line": "                            An optional argument.",
                  "_number": 10,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Inheritance diagram:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "inheritance-diagram",
            "args0": [
              "IPython.core.magic_arguments"
            ],
            "inner": {
              "inline": [],
              "inner": []
            }
          }
        }
      ],
      "title": null
    }
  ]
}