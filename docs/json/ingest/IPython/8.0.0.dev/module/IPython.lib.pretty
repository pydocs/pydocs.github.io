{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "To remove in the future \u2013\u2013 IPython.lib.pretty"
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/dev/ipython/IPython/lib/pretty.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "aliases": [
    "IPython.lib.pretty"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "8.0.0.dev",
  "signature": null,
  "references": null,
  "logo": "logo.png",
  "qa": "IPython.lib.pretty",
  "arbitrary": [
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Python advanced pretty printer.  This pretty printer is intended to replace the old "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "pprint"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " python module which does not allow developers to provide their own pretty print callbacks."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This module is based on ruby's "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "prettyprint.rb"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " library by "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "Tanaka Akira"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "To directly print the representation of an object use "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "pprint"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "from pretty import pprint",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "pprint(complex_object)",
                  "_number": 1,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "To get a string of the output use "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "pretty",
                  "reference": {
                    "module": "IPython",
                    "version": "8.0.0.dev",
                    "kind": "module",
                    "path": "IPython.lib.pretty"
                  },
                  "kind": "module",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "from pretty import pretty",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "string = pretty(complex_object)",
                  "_number": 1,
                  "_offset": 0
                }
              ]
            }
          }
        }
      ],
      "title": "Example Usage"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The pretty library allows developers to add pretty printing rules for their own objects.  This process is straightforward.  All you have to do is to add a "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "_repr_pretty_"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " method to your object and call the methods on the pretty printer passed::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "class MyObject(object):",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "    def _repr_pretty_(self, p, cycle):",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "        ...",
                  "_number": 3,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Here's an example for a class with a simple constructor::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "class MySimpleObject:",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "    def __init__(self, a, b, *, c=None):",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "        self.a = a",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": "        self.b = b",
                  "_number": 4,
                  "_offset": 0
                },
                {
                  "_line": "        self.c = c",
                  "_number": 5,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 6,
                  "_offset": 0
                },
                {
                  "_line": "    def _repr_pretty_(self, p, cycle):",
                  "_number": 7,
                  "_offset": 0
                },
                {
                  "_line": "        ctor = CallExpression.factory(self.__class__.__name__)",
                  "_number": 8,
                  "_offset": 0
                },
                {
                  "_line": "        if self.c is None:",
                  "_number": 9,
                  "_offset": 0
                },
                {
                  "_line": "            p.pretty(ctor(a, b))",
                  "_number": 10,
                  "_offset": 0
                },
                {
                  "_line": "        else:",
                  "_number": 11,
                  "_offset": 0
                },
                {
                  "_line": "            p.pretty(ctor(a, b, c=c))",
                  "_number": 12,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Here is an example implementation of a "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "_repr_pretty_"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " method for a list subclass::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "class MyList(list):",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "    def _repr_pretty_(self, p, cycle):",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "        if cycle:",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": "            p.text('MyList(...)')",
                  "_number": 4,
                  "_offset": 0
                },
                {
                  "_line": "        else:",
                  "_number": 5,
                  "_offset": 0
                },
                {
                  "_line": "            with p.group(8, 'MyList([', '])'):",
                  "_number": 6,
                  "_offset": 0
                },
                {
                  "_line": "                for idx, item in enumerate(self):",
                  "_number": 7,
                  "_offset": 0
                },
                {
                  "_line": "                    if idx:",
                  "_number": 8,
                  "_offset": 0
                },
                {
                  "_line": "                        p.text(',')",
                  "_number": 9,
                  "_offset": 0
                },
                {
                  "_line": "                        p.breakable()",
                  "_number": 10,
                  "_offset": 0
                },
                {
                  "_line": "                    p.pretty(item)",
                  "_number": 11,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "cycle"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " parameter is "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "True"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " if pretty detected a cycle.  You "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "have"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " to react to that or the result is an infinite loop.  "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "p.text()"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " just adds non breaking text to the output, "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "p.breakable()"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " either adds a whitespace or breaks here.  If you pass it an argument it's used instead of the default space.  "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "p.pretty"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " prettyprints another object using the pretty print method."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The first parameter to the "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "group",
                  "reference": {
                    "module": "IPython",
                    "version": "8.0.0.dev",
                    "kind": "module",
                    "path": "IPython.lib.pretty._PrettyPrinterBase.group"
                  },
                  "kind": "module",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " function specifies the extra indentation of the next line.  In this example the next item will either be on the same line (if the items are short enough) or aligned with the right edge of the opening bracket of "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "MyList"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "If you just want to indent something you can use the group function without open / close parameters.  You can also use this code::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "with p.indent(2):",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "    ...",
                  "_number": 1,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Inheritance diagram:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "inheritance-diagram",
            "args0": [
              "IPython.lib.pretty"
            ],
            "inner": {
              "inline": [],
              "inner": []
            }
          }
        },
        {
          "type": "FieldList",
          "data": {
            "children": [
              {
                "name": [
                  {
                    "type": "Words",
                    "data": {
                      "value": "copyright"
                    }
                  }
                ],
                "body": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "2007 by Armin Ronacher.             Portions (c) 2009 by Robert Kern."
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              },
              {
                "name": [
                  {
                    "type": "Words",
                    "data": {
                      "value": "license"
                    }
                  }
                ],
                "body": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "BSD License."
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              }
            ]
          }
        }
      ],
      "title": "Extending"
    }
  ]
}