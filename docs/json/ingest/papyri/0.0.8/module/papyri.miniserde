{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Example::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "In [14]: from dataclasses import dataclass",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "    ...: from typing import Optional, Union, List",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "    ...:",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": "Note that Author and Reviewer are isomorphic even if totally unrelated.",
                  "_number": 4,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 5,
                  "_offset": 0
                },
                {
                  "_line": "In [15]: @dataclass",
                  "_number": 6,
                  "_offset": 0
                },
                {
                  "_line": "    ...: class Author:",
                  "_number": 7,
                  "_offset": 0
                },
                {
                  "_line": "    ...:     first: Optional[str]",
                  "_number": 8,
                  "_offset": 0
                },
                {
                  "_line": "    ...:     last: str",
                  "_number": 9,
                  "_offset": 0
                },
                {
                  "_line": "    ...:",
                  "_number": 10,
                  "_offset": 0
                },
                {
                  "_line": "    ...: @dataclass",
                  "_number": 11,
                  "_offset": 0
                },
                {
                  "_line": "    ...: class Reviewer:",
                  "_number": 12,
                  "_offset": 0
                },
                {
                  "_line": "    ...:     first: Optional[str]",
                  "_number": 13,
                  "_offset": 0
                },
                {
                  "_line": "    ...:     last: str",
                  "_number": 14,
                  "_offset": 0
                },
                {
                  "_line": "    ...:",
                  "_number": 15,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 16,
                  "_offset": 0
                },
                {
                  "_line": "Here, items can be heterogenous, or of ambiguous type based only on its fields values.",
                  "_number": 17,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 18,
                  "_offset": 0
                },
                {
                  "_line": "In [16]: @dataclass",
                  "_number": 19,
                  "_offset": 0
                },
                {
                  "_line": "    ...: class Book:",
                  "_number": 20,
                  "_offset": 0
                },
                {
                  "_line": "    ...:     author: List[Union[Author, Reviewer]]",
                  "_number": 21,
                  "_offset": 0
                },
                {
                  "_line": "    ...:     title: str",
                  "_number": 22,
                  "_offset": 0
                },
                {
                  "_line": "    ...:",
                  "_number": 23,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 24,
                  "_offset": 0
                },
                {
                  "_line": "In [17]: obj = Book([Author(\"Matthias\", \"B\"), Reviewer(\"Tony\", \"Fast\")], \"pyshs\")",
                  "_number": 25,
                  "_offset": 0
                },
                {
                  "_line": "    ...:",
                  "_number": 26,
                  "_offset": 0
                },
                {
                  "_line": "    ...: data = serialize(obj , Book)",
                  "_number": 27,
                  "_offset": 0
                },
                {
                  "_line": "    ...:",
                  "_number": 28,
                  "_offset": 0
                },
                {
                  "_line": "    ...: deserialize(Book, Book, data)",
                  "_number": 29,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 30,
                  "_offset": 0
                },
                {
                  "_line": "Out[17]: Book(author=[Author(first='Matthias', last='B'), Reviewer(first='Tony', last='Fast')], title='pyshs')",
                  "_number": 31,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 32,
                  "_offset": 0
                },
                {
                  "_line": "                      ^...................................^",
                  "_number": 33,
                  "_offset": 0
                },
                {
                  "_line": "                                        .",
                  "_number": 34,
                  "_offset": 0
                },
                {
                  "_line": "                                        .Note the conserved types.",
                  "_number": 35,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Unlike other similar libraries that automatically serialise/deserialise it has the following properties:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BulletList",
          "data": {
            "value": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "object do not need to have a give baseclass, they need to have an __init__   or _deserialise class method that takes each parameter as kwargs."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Subclass or isomorphic classes are kept in the de-serialisation, in   particular in Union and List of Unions. That is to say it will properly   de-serialise and heterogenous list or dict, as long as those respect the   type annotation."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Both Pydantic and Jetblack-serialize would have erased the types and returned either 2 Authors or 2 Reviewers."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BulletList",
          "data": {
            "value": [
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "lines": {
                        "_lines": []
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": []
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "it is also compatible with Rust Serde with adjacently tagged Unions (not"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "critical but nice to have)"
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "A mini-implementation of an automatic serialiser-deserialiser for nested dataclass like class based on type annotations."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/papyri/miniserde.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "aliases": [
    "papyri.miniserde"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "0.0.8",
  "signature": null,
  "references": null,
  "logo": "logo.png",
  "qa": "papyri.miniserde",
  "arbitrary": [
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "A mini-implementation of an automatic serialiser-deserialiser for nested dataclass like class based on type annotations."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Example::       "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "In [14]: from dataclasses import dataclass",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "    ...: from typing import Optional, Union, List",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "    ...:",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": "Note that Author and Reviewer are isomorphic even if totally unrelated.",
                  "_number": 4,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 5,
                  "_offset": 0
                },
                {
                  "_line": "In [15]: @dataclass",
                  "_number": 6,
                  "_offset": 0
                },
                {
                  "_line": "    ...: class Author:",
                  "_number": 7,
                  "_offset": 0
                },
                {
                  "_line": "    ...:     first: Optional[str]",
                  "_number": 8,
                  "_offset": 0
                },
                {
                  "_line": "    ...:     last: str",
                  "_number": 9,
                  "_offset": 0
                },
                {
                  "_line": "    ...:",
                  "_number": 10,
                  "_offset": 0
                },
                {
                  "_line": "    ...: @dataclass",
                  "_number": 11,
                  "_offset": 0
                },
                {
                  "_line": "    ...: class Reviewer:",
                  "_number": 12,
                  "_offset": 0
                },
                {
                  "_line": "    ...:     first: Optional[str]",
                  "_number": 13,
                  "_offset": 0
                },
                {
                  "_line": "    ...:     last: str",
                  "_number": 14,
                  "_offset": 0
                },
                {
                  "_line": "    ...:",
                  "_number": 15,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 16,
                  "_offset": 0
                },
                {
                  "_line": "Here, items can be heterogenous, or of ambiguous type based only on its fields values.",
                  "_number": 17,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 18,
                  "_offset": 0
                },
                {
                  "_line": "In [16]: @dataclass",
                  "_number": 19,
                  "_offset": 0
                },
                {
                  "_line": "    ...: class Book:",
                  "_number": 20,
                  "_offset": 0
                },
                {
                  "_line": "    ...:     author: List[Union[Author, Reviewer]]",
                  "_number": 21,
                  "_offset": 0
                },
                {
                  "_line": "    ...:     title: str",
                  "_number": 22,
                  "_offset": 0
                },
                {
                  "_line": "    ...:",
                  "_number": 23,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 24,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 25,
                  "_offset": 0
                },
                {
                  "_line": "In [17]: obj = Book([Author(\"Matthias\", \"B\"), Reviewer(\"Tony\", \"Fast\")], \"pyshs\")",
                  "_number": 26,
                  "_offset": 0
                },
                {
                  "_line": "    ...:",
                  "_number": 27,
                  "_offset": 0
                },
                {
                  "_line": "    ...: data = serialize(obj , Book)",
                  "_number": 28,
                  "_offset": 0
                },
                {
                  "_line": "    ...:",
                  "_number": 29,
                  "_offset": 0
                },
                {
                  "_line": "    ...: deserialize(Book, Book, data)",
                  "_number": 30,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 31,
                  "_offset": 0
                },
                {
                  "_line": "Out[17]: Book(author=[Author(first='Matthias', last='B'), Reviewer(first='Tony', last='Fast')], title='pyshs')",
                  "_number": 32,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 33,
                  "_offset": 0
                },
                {
                  "_line": "                      ^...................................^",
                  "_number": 34,
                  "_offset": 0
                },
                {
                  "_line": "                                        .",
                  "_number": 35,
                  "_offset": 0
                },
                {
                  "_line": "                                        .Note the conserved types.",
                  "_number": 36,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Unlike other similar libraries that automatically serialise/deserialise it has the following properties:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BulletList",
          "data": {
            "value": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "object do not need to have a give baseclass, they need to have an __init__   or _deserialise class method that takes each parameter as kwargs."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Subclass or isomorphic classes are kept in the de-serialisation, in   particular in Union and List of Unions. That is to say it will properly   de-serialise and heterogenous list or dict, as long as those respect the   type annotation."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Both Pydantic and Jetblack-serialize would have erased the types and returned either 2 Authors or 2 Reviewers."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BulletList",
          "data": {
            "value": [
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "lines": {
                        "_lines": []
                      },
                      "wh": {
                        "_lines": []
                      },
                      "ind": {
                        "_lines": []
                      },
                      "dt": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "it is also compatible with Rust Serde with adjacently tagged Unions (not"
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "critical but nice to have)"
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "title": null
    }
  ]
}