{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Used exclusively for the purpose static type checking, "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "NBitBase",
                  "reference": {
                    "module": "numpy",
                    "version": "1.22.1",
                    "kind": "module",
                    "path": "numpy.typing.NBitBase"
                  },
                  "kind": "module",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " represents the base of a hierarchical set of subclasses. Each subsequent subclass is herein used for representing a lower level of precision, "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "e.g."
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "64Bit > 32Bit > 16Bit"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Admonition",
          "data": {
            "kind": "versionadded",
            "title": "TODO",
            "children": [
              {
                "inline": [
                  {
                    "type": "Words",
                    "data": {
                      "value": "1.20 "
                    }
                  }
                ],
                "inner": []
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "A type representing "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "numpy.number",
                  "reference": {
                    "module": "numpy",
                    "version": "1.22.1",
                    "kind": "module",
                    "path": "numpy.number"
                  },
                  "kind": "module",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " precision during static type checking."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    {
      "module": "numpy",
      "version": "1.22.1",
      "kind": "module",
      "path": "numpy.typing.NBitBase"
    },
    {
      "module": "numpy",
      "version": "1.22.1",
      "kind": "module",
      "path": "numpy.number"
    }
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Examples"
  ],
  "item_file": "/numpy/typing/__init__.py",
  "item_line": 176,
  "item_type": "<class 'type'>",
  "aliases": [
    "numpy.typing.NBitBase"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Below is a typical usage example: "
              }
            },
            {
              "type": "Link",
              "data": {
                "value": "NBitBase",
                "reference": {
                  "module": "numpy",
                  "version": "1.22.1",
                  "kind": "module",
                  "path": "numpy.typing.NBitBase"
                },
                "kind": "module",
                "exists": true
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " is herein used for annotating a function that takes a float and integer of arbitrary precision as arguments and returns a new float of whichever precision is largest ("
              }
            },
            {
              "type": "Emph",
              "data": {
                "value": {
                  "value": "e.g."
                }
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "np.float16 + np.int64 -> np.float64"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": ")."
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "BlockDirective",
        "data": {
          "directive_name": "code-block",
          "args0": [],
          "inner": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "python "
                }
              }
            ],
            "inner": []
          }
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> from __future__ import annotations",
            ">>> from typing import TypeVar, TYPE_CHECKING",
            ">>> import numpy as np",
            ">>> import numpy.typing as npt"
          ]
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> T1 = TypeVar(\"T1\", bound=npt.NBitBase)",
            ">>> T2 = TypeVar(\"T2\", bound=npt.NBitBase)"
          ]
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> def add(a: np.floating[T1], b: np.integer[T2]) -> np.floating[T1 | T2]:",
            "...     return a + b"
          ]
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> a = np.float16()",
            ">>> b = np.int64()",
            ">>> out = add(a, b)"
          ]
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> if TYPE_CHECKING:",
            "...     reveal_locals()",
            "...     # note: Revealed local types are:",
            "...     # note:     a: numpy.floating[numpy.typing._16Bit*]",
            "...     # note:     b: numpy.signedinteger[numpy.typing._64Bit*]",
            "...     # note:     out: numpy.floating[numpy.typing._64Bit*]"
          ]
        }
      }
    ],
    "title": null
  },
  "see_also": [],
  "version": "1.22.1",
  "signature": "NBitBase()",
  "references": null,
  "logo": "logo.png",
  "qa": "numpy.typing.NBitBase",
  "arbitrary": []
}