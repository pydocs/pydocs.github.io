{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "PCG-64 DXSM is a 128-bit implementation of O'Neill's permutation congruential generator (, ). PCG-64 DXSM has a period of "
                }
              },
              {
                "type": "Math",
                "data": {
                  "value": [
                    "2^{128}"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and supports advancing an arbitrary number of steps as well as "
                }
              },
              {
                "type": "Math",
                "data": {
                  "value": [
                    "2^{127}"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " streams. The specific member of the PCG family that we use is PCG CM DXSM 128/64. It differs from "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "PCG64"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " in that it uses the stronger DXSM output function, a 64-bit \"cheap multiplier\" in the LCG, and outputs from the state before advancing it rather than advance-then-output."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "PCG64DXSM"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " provides a capsule containing function pointers that produce doubles, and unsigned 32 and 64- bit integers. These are not directly consumable in Python and must be consumed by a "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "Generator"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " or similar object that supports low-level access."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Supports the method "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": "advance",
                  "domain": null,
                  "role": "meth"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " to advance the RNG an arbitrary number of steps. The state of the PCG-64 DXSM RNG is represented by 2 128-bit unsigned integers."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Strong",
                "data": {
                  "content": {
                    "value": "State and Seeding"
                  }
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "PCG64DXSM"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " state vector consists of 2 unsigned 128-bit values, which are represented externally as Python ints. One is the state of the PRNG, which is advanced by a linear congruential generator (LCG). The second is a fixed odd increment used in the LCG."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The input seed is processed by "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "SeedSequence",
                  "reference": {
                    "module": "numpy",
                    "version": "1.22.1",
                    "kind": "module",
                    "path": "numpy.random.bit_generator.SeedSequence"
                  },
                  "kind": "module",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " to generate both values. The increment is not independently settable."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Strong",
                "data": {
                  "content": {
                    "value": "Parallel Features"
                  }
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The preferred way to use a BitGenerator in parallel applications is to use the "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "SeedSequence.spawn",
                  "reference": {
                    "module": "numpy",
                    "version": "1.22.1",
                    "kind": "module",
                    "path": "numpy.random.bit_generator.ISpawnableSeedSequence.spawn"
                  },
                  "kind": "module",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " method to obtain entropy values, and to use these to generate new BitGenerators:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": ">>> from numpy.random import Generator, PCG64DXSM, SeedSequence\n>>> sg = SeedSequence(1234)\n>>> rg = [Generator(PCG64DXSM(s)) for s in sg.spawn(10)]"
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Strong",
                "data": {
                  "content": {
                    "value": "Compatibility Guarantee"
                  }
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "PCG64DXSM"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " makes a guarantee that a fixed seed will always produce the same random integer stream."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "seed",
            "type_": "{None, int, array_like[ints], SeedSequence}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A seed to initialize the "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "BitGenerator",
                        "reference": {
                          "module": "numpy",
                          "version": "1.22.1",
                          "kind": "module",
                          "path": "numpy.random.bit_generator.BitGenerator"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". If None, then fresh, unpredictable entropy will be pulled from the OS. If an "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "int"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " or "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "array_like[ints]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is passed, then it will be passed to "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "SeedSequence",
                        "reference": {
                          "module": "numpy",
                          "version": "1.22.1",
                          "kind": "module",
                          "path": "numpy.random.bit_generator.SeedSequence"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " to derive the initial "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "BitGenerator",
                        "reference": {
                          "module": "numpy",
                          "version": "1.22.1",
                          "kind": "module",
                          "path": "numpy.random.bit_generator.BitGenerator"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " state. One may also pass in a "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "SeedSequence",
                        "reference": {
                          "module": "numpy",
                          "version": "1.22.1",
                          "kind": "module",
                          "path": "numpy.random.bit_generator.SeedSequence"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instance."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "BitGenerator for the PCG-64 DXSM pseudo-random number generator."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    {
      "module": "numpy",
      "version": "1.22.1",
      "kind": "module",
      "path": "numpy.random.bit_generator.ISpawnableSeedSequence.spawn"
    },
    {
      "module": "numpy",
      "version": "1.22.1",
      "kind": "module",
      "path": "numpy.random.bit_generator.BitGenerator"
    },
    {
      "module": "numpy",
      "version": "1.22.1",
      "kind": "module",
      "path": "numpy.random.bit_generator.SeedSequence"
    }
  ],
  "ordered_sections": [
    "Signature",
    "Summary",
    "Parameters",
    "Notes",
    "References"
  ],
  "item_file": "/numpy/random/_pcg64.cpython-39-darwin.so",
  "item_line": null,
  "item_type": "<class 'type'>",
  "aliases": [
    "numpy.random.PCG64DXSM"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "1.22.1",
  "signature": "PCG64DXSM(seed=None)",
  "references": null,
  "logo": "logo.png",
  "qa": "numpy.random._pcg64.PCG64DXSM",
  "arbitrary": []
}