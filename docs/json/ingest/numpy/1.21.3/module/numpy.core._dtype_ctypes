{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "In an ideal world, we could achieve this through the PEP3118 buffer protocol, something like::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "def dtype_from_ctypes_type(t):",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "    # needed to ensure that the shape of `t` is within memoryview.format",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "    class DummyStruct(ctypes.Structure):",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "        _fields_ = [('a', t)]",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 4,
                  "_offset": 0
                },
                {
                  "_line": "    # empty to avoid memory allocation",
                  "_number": 5,
                  "_offset": 0
                },
                {
                  "_line": "    ctype_0 = (DummyStruct * 0)()",
                  "_number": 6,
                  "_offset": 0
                },
                {
                  "_line": "    mv = memoryview(ctype_0)",
                  "_number": 7,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 8,
                  "_offset": 0
                },
                {
                  "_line": "    # convert the struct, and slice back out the field",
                  "_number": 9,
                  "_offset": 0
                },
                {
                  "_line": "    return _dtype_from_pep3118(mv.format)['a']",
                  "_number": 10,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Unfortunately, this fails because:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BulletList",
          "data": {
            "value": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "ctypes cannot handle length-0 arrays with PEP3118 (bpo-32782)"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "PEP3118 cannot represent unions, but both numpy and ctypes can"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "ctypes cannot handle big-endian structs with PEP3118 (bpo-32780)"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Conversion from ctypes to dtype."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/numpy/core/_dtype_ctypes.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "aliases": [
    "numpy.core._dtype_ctypes"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "1.21.3",
  "signature": null,
  "references": null,
  "logo": "logo.png",
  "qa": "numpy.core._dtype_ctypes",
  "arbitrary": [
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Conversion from ctypes to dtype."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "In an ideal world, we could achieve this through the PEP3118 buffer protocol, something like::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "def dtype_from_ctypes_type(t):",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "    # needed to ensure that the shape of `t` is within memoryview.format",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "    class DummyStruct(ctypes.Structure):",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "        _fields_ = [('a', t)]",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 4,
                  "_offset": 0
                },
                {
                  "_line": "    # empty to avoid memory allocation",
                  "_number": 5,
                  "_offset": 0
                },
                {
                  "_line": "    ctype_0 = (DummyStruct * 0)()",
                  "_number": 6,
                  "_offset": 0
                },
                {
                  "_line": "    mv = memoryview(ctype_0)",
                  "_number": 7,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 8,
                  "_offset": 0
                },
                {
                  "_line": "    # convert the struct, and slice back out the field",
                  "_number": 9,
                  "_offset": 0
                },
                {
                  "_line": "    return _dtype_from_pep3118(mv.format)['a']",
                  "_number": 10,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Unfortunately, this fails because:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BulletList",
          "data": {
            "value": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "ctypes cannot handle length-0 arrays with PEP3118 (bpo-32782)"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "PEP3118 cannot represent unions, but both numpy and ctypes can"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "ctypes cannot handle big-endian structs with PEP3118 (bpo-32780)"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    }
  ]
}