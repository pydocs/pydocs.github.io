{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "BlockQuote",
          "data": {
            "value": [
              "This function is the preferred method for creating an array copy.  The",
              "function :func:`numpy.copy` is similar, but it defaults to using order 'K',",
              "and will not pass sub-classes through by default."
            ]
          }
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "order",
            "type_": "{'C', 'F', 'A', 'K'}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Controls the memory layout of the copy. 'C' means C-order, 'F' means F-order, 'A' means 'F' if "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "a"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is Fortran contiguous, 'C' otherwise. 'K' means match the layout of "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "a"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " as closely as possible. (Note that this function and "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "numpy.copy",
                        "reference": {
                          "module": "numpy",
                          "version": "1.21.3",
                          "kind": "module",
                          "path": "numpy.copy"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are very similar but have different default values for their order= arguments, and this function always passes sub-classes through.)"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "BlockQuote",
          "data": {
            "value": [
              "Return a copy of the array."
            ]
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    {
      "module": "numpy",
      "version": "1.21.3",
      "kind": "module",
      "path": "numpy.copy"
    }
  ],
  "ordered_sections": [
    "Signature",
    "Summary",
    "Parameters",
    "See Also",
    "Notes",
    "Examples"
  ],
  "item_file": "/numpy/ma/core.py",
  "item_line": null,
  "item_type": "<class 'numpy.ma.core._frommethod'>",
  "aliases": [
    "numpy.ma.copy"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> x = np.array([[1,2,3],[4,5,6]], order='F')"
          ]
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> y = x.copy()"
          ]
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> x.fill(0)"
          ]
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> x",
            "array([[0, 0, 0],",
            "       [0, 0, 0]])"
          ]
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> y",
            "array([[1, 2, 3],",
            "       [4, 5, 6]])"
          ]
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> y.flags['C_CONTIGUOUS']",
            "True"
          ]
        }
      }
    ],
    "title": null
  },
  "see_also": [
    {
      "name": {
        "name": "numpy.copy",
        "ref": "numpy.copy",
        "exists": true
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Similar function with different default behavior numpy.copyto"
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    }
  ],
  "version": "1.21.3",
  "signature": "copy(self, *args, **params) a.copy(order='C')",
  "references": null,
  "logo": "logo.png",
  "qa": "numpy.ma.core.copy",
  "arbitrary": []
}