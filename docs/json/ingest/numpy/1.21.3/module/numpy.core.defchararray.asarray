{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Versus a regular NumPy array of type "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "str"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " or "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "unicode",
                  "reference": {
                    "module": null,
                    "version": null,
                    "kind": "local",
                    "path": "unicode"
                  },
                  "kind": "local",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", this class adds the following functionality:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockQuote",
          "data": {
            "value": [
              "1) values automatically have whitespace removed from the end",
              "   when indexed",
              "",
              "2) comparison operators automatically remove whitespace from the",
              "   end when comparing values",
              "",
              "3) vectorized string operations are provided as methods",
              "   (e.g. `str.endswith`) and infix operators (e.g. ``+``, ``*``,``%``)"
            ]
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "obj",
            "type_": "array of str or unicode-like",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "itemsize",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Link",
                      "data": {
                        "value": "itemsize",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "itemsize"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is the number of characters per scalar in the resulting array.  If "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "itemsize",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "itemsize"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is None, and "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "obj",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "obj"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is an object array or a Python list, the "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "itemsize",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "itemsize"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " will be automatically determined.  If "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "itemsize",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "itemsize"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is provided and "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "obj",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "obj"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is of type str or unicode, then the "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "obj",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "obj"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " string will be chunked into "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "itemsize",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "itemsize"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " pieces."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "unicode",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "When true, the resulting "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "chararray",
                        "reference": {
                          "module": "numpy",
                          "version": "1.21.3",
                          "kind": "module",
                          "path": "numpy.chararray"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " can contain Unicode characters, when false only 8-bit characters.  If unicode is None and "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "obj",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "obj"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is one of the following:"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "BlockQuote",
                "data": {
                  "value": [
                    "- a `chararray`,",
                    "- an ndarray of type `str` or 'unicode`",
                    "- a Python str or unicode object,"
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "then the unicode setting of the output array will be automatically determined."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "order",
            "type_": "{'C', 'F'}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Specify the order of the array.  If order is 'C' (default), then the array will be in C-contiguous order (last-index varies the fastest).  If order is 'F', then the returned array will be in Fortran-contiguous order (first-index varies the fastest)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Convert the input to a "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "chararray",
                  "reference": {
                    "module": "numpy",
                    "version": "1.21.3",
                    "kind": "module",
                    "path": "numpy.chararray"
                  },
                  "kind": "module",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", copying the data only if necessary."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    {
      "module": "numpy",
      "version": "1.21.3",
      "kind": "module",
      "path": "numpy.chararray"
    }
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters"
  ],
  "item_file": "/numpy/core/defchararray.py",
  "item_line": 2746,
  "item_type": "<class 'function'>",
  "aliases": [
    "numpy.char.asarray"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "1.21.3",
  "signature": "asarray(obj, itemsize=None, unicode=None, order=None)",
  "references": null,
  "logo": "logo.png",
  "qa": "numpy.core.defchararray.asarray",
  "arbitrary": []
}