{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The result is built by combining the results of 1d Vandermonde matrices,"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockMath",
          "data": {
            "value": "W [ i_0, \\ldots, i_M, j_0, \\ldots, j_N] = \\prod_ { k=0}^N { V_k ( x_k) [ i_0, \\ldots, i_M, j_k]} "
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "where"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockMath",
          "data": {
            "value": "N &= \\texttt { len ( points)} = \\texttt { len ( degrees)} = \\texttt { len ( vander\\_fs)} \\\\ M &= \\texttt { points [ k].ndim} \\\\ V_k &= \\texttt { vander\\_fs [ k]} \\\\ x_k &= \\texttt { points [ k]} \\\\ 0 \\le j_k &\\le \\texttt { degrees [ k]} "
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Expanding the one-dimensional "
                }
              },
              {
                "type": "Math",
                "data": {
                  "value": [
                    "V_k"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " functions gives:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockMath",
          "data": {
            "value": "W [ i_0, \\ldots, i_M, j_0, \\ldots, j_N] = \\prod_ { k=0}^N { B_ { k, j_k} ( x_k [ i_0, \\ldots, i_M])} "
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "where "
                }
              },
              {
                "type": "Math",
                "data": {
                  "value": [
                    "B_{k,m}"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is the m'th basis of the polynomial construction used along dimension "
                }
              },
              {
                "type": "Math",
                "data": {
                  "value": [
                    "k"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ". For a regular polynomial, "
                }
              },
              {
                "type": "Math",
                "data": {
                  "value": [
                    "B_{k, m}(x) = P_m(x) = x^m"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "vander_fs",
            "type_": "Sequence[function(array_like, int) -> ndarray]",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The 1d vander function to use for each axis, such as "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "polyvander"
                        ]
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "points",
            "type_": "Sequence[array_like]",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Arrays of point coordinates, all of the same shape. The dtypes will be converted to either float64 or complex128 depending on whether any of the elements are complex. Scalars are converted to 1-D arrays. This must be the same length as "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "vander_fs",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "vander_fs"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "degrees",
            "type_": "Sequence[int]",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The maximum degree (inclusive) to use for each axis. This must be the same length as "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "vander_fs",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "vander_fs"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "vander_nd",
            "type_": "ndarray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "An array of shape "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "points[0].shape + tuple(d + 1 for d in degrees)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "A generalization of the Vandermonde matrix for N dimensions"
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns"
  ],
  "item_file": "/numpy/polynomial/polyutils.py",
  "item_line": 377,
  "item_type": "<class 'function'>",
  "aliases": [
    "numpy.polynomial.polyutils._vander_nd"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "1.21.3",
  "signature": "_vander_nd(vander_fs, points, degrees)",
  "references": null,
  "logo": "logo.png",
  "qa": "numpy.polynomial.polyutils._vander_nd",
  "arbitrary": []
}