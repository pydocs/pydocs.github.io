{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "However, it also provides a filter mechanism to work around https://bugs.python.org/issue4180."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This bug causes Python before 3.4 to not reliably show warnings again after they have been ignored once (even within catch_warnings). It means that no \"ignore\" filter can be used easily, since following tests might need to see the warning. Additionally it allows easier specificity for testing warnings and can be nested."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Filters added inside the context manager will be discarded again when leaving it. Upon entering all filters defined outside a context will be applied automatically."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "When a recording filter is added, matching warnings are stored in the "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "log"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " attribute as well as in the list returned by "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "record"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "If filters are added and the "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "module"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " keyword is given, the warning registry of this module will additionally be cleared when applying it, entering the context, or exiting it. This could cause warnings to appear a second time after leaving the context if they were configured to be printed once (default) and were already printed before the context was entered."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Nesting this context manager will work as expected when the forwarding rule is \"always\" (default). Unfiltered and unrecorded warnings will be passed out and be matched by the outer level. On the outmost level they will be printed (or caught by another warnings context). The forwarding rule argument can modify this behaviour."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Like "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "catch_warnings"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " this context manager is not threadsafe."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "forwarding_rule",
            "type_": "str, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "One of \"always\", \"once\", \"module\", or \"location\". Analogous to the usual warnings module filter mode, it is useful to reduce noise mostly on the outmost level. Unsuppressed and unrecorded warnings will be forwarded based on this rule. Defaults to \"always\". \"location\" is equivalent to the warnings \"default\", match by exact location the warning warning originated from."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Context manager and decorator doing much the same as "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "warnings.catch_warnings"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Notes",
    "Examples"
  ],
  "item_file": "/numpy/testing/_private/utils.py",
  "item_line": 2030,
  "item_type": "<class 'type'>",
  "aliases": [
    "numpy.testing.suppress_warnings"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "With a context manager::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            "with np.testing.suppress_warnings() as sup:",
            "    sup.filter(DeprecationWarning, \"Some text\")",
            "    sup.filter(module=np.ma.core)",
            "    log = sup.record(FutureWarning, \"Does this occur?\")",
            "    command_giving_warnings()",
            "    # The FutureWarning was given once, the filtered warnings were",
            "    # ignored. All other warnings abide outside settings (may be",
            "    # printed/error)",
            "    assert_(len(log) == 1)",
            "    assert_(len(sup.log) == 1)  # also stored in log attribute"
          ]
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Or as a decorator::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            "sup = np.testing.suppress_warnings()",
            "sup.filter(module=np.ma.core)  # module must match exactly",
            "@sup",
            "def some_function():",
            "    # do something which causes a warning in np.ma.core",
            "    pass"
          ]
        }
      }
    ],
    "title": null
  },
  "see_also": [],
  "version": "1.21.3",
  "signature": "suppress_warnings(forwarding_rule='always')",
  "references": null,
  "logo": "logo.png",
  "qa": "numpy.testing._private.utils.suppress_warnings",
  "arbitrary": []
}