{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "attribute",
            "args0": [
              "address: str"
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "This worker ' s unique key. This can be its connected address ( such as `` ' tcp : / / 127.0.0.1 : 8891 ' ``) or an alias ( such as `` ' alice ' ``). "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "attribute",
            "args0": [
              "processing: {TaskState: cost}"
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "A dictionary of tasks that have been submitted to this worker. Each task state is associated with the expected cost in seconds of running that task, summing both the task ' s expected computation time and the expected communication time of its result. If a task is already executing on the worker and the excecution time is twice the learned average TaskGroup duration, this will be set to twice the current executing time. If the task is unknown, the default task duration is used instead of the TaskGroup average. Multiple tasks may be submitted to a worker in advance and the worker will run them eventually, depending on its execution resources ( but see : doc : `work - stealing`). All the tasks here are in the \" processing \" state. This attribute is kept in sync with : attr : `TaskState.processing_on`. "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "attribute",
            "args0": [
              "executing: {TaskState: duration}"
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "A dictionary of tasks that are currently being run on this worker. Each task state is asssociated with the duration in seconds which the task has been running. "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "attribute",
            "args0": [
              "has_what: {TaskState}"
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "An insertion - sorted set - like of tasks which currently reside on this worker. All the tasks here are in the \" memory \" state. This is the reverse mapping of : class : `TaskState.who_has`. "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "attribute",
            "args0": [
              "nbytes: int"
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "The total memory size, in bytes, used by the tasks this worker holds in memory ( i.e. the tasks in this worker ' s : attr : `has_what`). "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "attribute",
            "args0": [
              "nthreads: int"
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "The number of CPU threads made available on this worker. "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "attribute",
            "args0": [
              "resources: {str: Number}"
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "The available resources on this worker like `` { ' gpu ' : 2}``. These are abstract quantities that constrain certain tasks from running at the same time on this worker. "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "attribute",
            "args0": [
              "used_resources: {str: Number}"
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "The sum of each resource used by all tasks allocated to this worker. The numbers in this dictionary can only be less or equal than those in this worker ' s : attr : `resources`. "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "attribute",
            "args0": [
              "occupancy: double"
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "The total expected runtime, in seconds, of all tasks currently processing on this worker. This is the sum of all the costs in this worker ' s : attr : `processing` dictionary. "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "attribute",
            "args0": [
              "status: Status"
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "Read - only worker status, synced one way from the remote Worker object "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "attribute",
            "args0": [
              "nanny: str"
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "Address of the associated Nanny, if present "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "attribute",
            "args0": [
              "last_seen: Py_ssize_t"
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "The last time we received a heartbeat from this worker, in local scheduler time. "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "attribute",
            "args0": [
              "actors: {TaskState}"
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "A set of all TaskStates on this worker that are actors. This only includes those actors whose state actually lives on this worker, not actors to which this worker has a reference. "
                  }
                }
              ],
              "inner": []
            }
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "A simple object holding information about a worker."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/distributed/scheduler.py",
  "item_line": 388,
  "item_type": "<class 'type'>",
  "aliases": [
    "distributed.scheduler.WorkerState"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "2021.10.0",
  "signature": "WorkerState(*, address: str, status: distributed.core.Status, pid: ctypes.c_long, name: object, nthreads: ctypes.c_long = 0, memory_limit: ctypes.c_long, local_directory: str, nanny: str, services: 'dict | None' = None, versions: 'dict | None' = None, extra: 'dict | None' = None)",
  "references": null,
  "logo": "logo.png",
  "qa": "distributed.scheduler.WorkerState",
  "arbitrary": []
}