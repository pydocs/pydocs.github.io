{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Comm object using UCP."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "ep",
            "type_": "ucp.Endpoint",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The UCP endpoint."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "address",
            "type_": "str",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The address, prefixed with "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "ucx",
                          ":",
                          "//"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " to use."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "deserialize",
            "type_": "bool, default True",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Whether to deserialize data in "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "distributed.protocol.loads",
                        "reference": {
                          "module": "distributed",
                          "version": "2021.01.1+9.g613b3c820",
                          "kind": "module",
                          "path": "distributed.protocol.core.loads"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The read-write cycle uses the following pattern:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Each msg is serialized into a number of \"data\" frames. We prepend these real frames with two additional frames"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "    1. is_gpus: Boolean indicator for whether the frame should be",
                      "_number": 5,
                      "_offset": 4
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "       received into GPU memory. Packed in '?' format. Unpack with",
                      "_number": 6,
                      "_offset": 7
                    },
                    {
                      "_line": "       ``<n_frames>?`` format.",
                      "_number": 7,
                      "_offset": 7
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "1. is_gpus: Boolean indicator for whether the frame should be"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "received into GPU memory. Packed in '?' format. Unpack with "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "<n",
                              "_",
                              "frames>?"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": " format."
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              },
              {
                "lines": {
                  "_lines": [
                    {
                      "_line": "    2. frame_size : Unsigned int describing the size of frame (in bytes)",
                      "_number": 8,
                      "_offset": 4
                    }
                  ]
                },
                "wh": {
                  "_lines": []
                },
                "ind": {
                  "_lines": [
                    {
                      "_line": "       to receive. Packed in 'Q' format, so a length-0 frame is equivalent",
                      "_number": 9,
                      "_offset": 7
                    },
                    {
                      "_line": "       to an unsized frame. Unpacked with ``<n_frames>Q``.",
                      "_number": 10,
                      "_offset": 7
                    },
                    {
                      "_line": "",
                      "_number": 11,
                      "_offset": 7
                    }
                  ]
                },
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "2. frame_size : Unsigned int describing the size of frame (in bytes)"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "to receive. Packed in 'Q' format, so a length-0 frame is equivalent to an unsized frame. Unpacked with "
                          }
                        },
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "<n",
                              "_",
                              "frames>Q"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": ". "
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The expected read cycle is"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "1. Read the frame describing if connection is closing and number of frames 2. Read the frame describing whether each data frame is gpu-bound 3. Read the frame describing whether each data frame is sized 4. Read all the data frames."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    {
      "module": "distributed",
      "version": "2021.01.1+9.g613b3c820",
      "kind": "module",
      "path": "distributed.protocol.core.loads"
    }
  ],
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Notes"
  ],
  "item_file": "/Users/bussonniermatthias/dev/distributed/distributed/comm/ucx.py",
  "item_line": 126,
  "item_type": "<class 'abc.ABCMeta'>",
  "aliases": [
    "distributed.comm.ucx.UCX"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "2021.01.1+9.g613b3c820",
  "signature": "UCX(ep, local_addr: str, peer_addr: str, deserialize=True)",
  "references": null,
  "logo": "logo.png",
  "qa": "distributed.comm.ucx.UCX",
  "arbitrary": []
}