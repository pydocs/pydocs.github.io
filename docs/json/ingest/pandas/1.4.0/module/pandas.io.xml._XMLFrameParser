{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "To subclass this class effectively you must override the following methods:`"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "BulletList",
                    "data": {
                      "value": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Directive",
                                "data": {
                                  "value": "parse_data",
                                  "domain": null,
                                  "role": "func"
                                }
                              }
                            ],
                            "inner": []
                          }
                        },
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Directive",
                                "data": {
                                  "value": "_parse_nodes",
                                  "domain": null,
                                  "role": "func"
                                }
                              }
                            ],
                            "inner": []
                          }
                        },
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Directive",
                                "data": {
                                  "value": "_parse_doc",
                                  "domain": null,
                                  "role": "func"
                                }
                              }
                            ],
                            "inner": []
                          }
                        },
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Directive",
                                "data": {
                                  "value": "_validate_names",
                                  "domain": null,
                                  "role": "func"
                                }
                              }
                            ],
                            "inner": []
                          }
                        },
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Directive",
                                "data": {
                                  "value": "_validate_path",
                                  "domain": null,
                                  "role": "func"
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "See each method's respective documentation for details on their functionality."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "path_or_buffer",
            "type_": "a valid JSON str, path object or file-like object",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Any valid string path is acceptable. The string could be a URL. Valid URL schemes include http, ftp, s3, and file."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "xpath",
            "type_": "str or regex",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The XPath expression to parse required set of nodes for migration to "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": "Data Frame",
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": "etree",
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " supports limited XPath."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "namespacess",
            "type_": "dict",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The namespaces defined in XML document (`xmlns:namespace='URI') as dicts with key being namespace and value the URI."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "elems_only",
            "type_": "bool",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Parse only the child elements at the specified "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "xpath",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "xpath"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "attrs_only",
            "type_": "bool",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Parse only the attributes at the specified "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "xpath",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "xpath"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "names",
            "type_": "list",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Column names for Data Frame of parsed XML data."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "encoding",
            "type_": "str",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Encoding of xml object or document."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "stylesheet",
            "type_": "str or file-like",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "URL, file, file-like object, or a raw string containing XSLT, "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": "etree",
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " does not support XSLT but retained for consistency."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "compression",
            "type_": "str or dict, default 'infer'",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "For on-the-fly decompression of on-disk data. If 'infer' and 'path_or_buffer' is path-like, then detect compression from the following extensions: '.gz', '.bz2', '.zip', '.xz', or '.zst' (otherwise no compression). If using 'zip', the ZIP file must contain only one data file to be read in. Set to "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "None"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " for no decompression. Can also be a dict with key "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'method'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " set to one of {"
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'zip'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'gzip'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'bz2'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'zstd'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "} and other key-value pairs are forwarded to "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "zipfile.ZipFile"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "gzip.GzipFile"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "bz2.BZ2File"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", or "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "zstandard.ZstdDecompressor"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", respectively. As an example, the following could be passed for Zstandard decompression using a custom compression dictionary: "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "compression={'method': 'zstd', 'dict_data': my_compression_dict}"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Admonition",
                "data": {
                  "kind": "versionchanged",
                  "title": "TODO",
                  "children": [
                    {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "1.4.0 Zstandard support. "
                          }
                        }
                      ],
                      "inner": []
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "storage_options",
            "type_": "dict, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Extra options that make sense for a particular storage connection, e.g. host, port, username, password, etc.,"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Internal subclass to parse XML into DataFrames."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Parameters",
    "See Also",
    "Notes"
  ],
  "item_file": "/pandas/io/xml.py",
  "item_line": 42,
  "item_type": "<class 'type'>",
  "aliases": [
    "pandas.io.xml._XMLFrameParser"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [
    {
      "name": {
        "name": "pandas.io.xml._EtreeFrameParser",
        "ref": "pandas.io.xml._EtreeFrameParser",
        "exists": true
      },
      "descriptions": [],
      "type": null
    },
    {
      "name": {
        "name": "pandas.io.xml._LxmlFrameParser",
        "ref": "pandas.io.xml._LxmlFrameParser",
        "exists": true
      },
      "descriptions": [],
      "type": null
    }
  ],
  "version": "1.4.0",
  "signature": "_XMLFrameParser(path_or_buffer: 'FilePath | ReadBuffer[bytes] | ReadBuffer[str]', xpath: 'str', namespaces: 'dict[str, str] | None', elems_only: 'bool', attrs_only: 'bool', names: 'Sequence[str] | None', encoding: 'str | None', stylesheet: 'FilePath | ReadBuffer[bytes] | ReadBuffer[str] | None', compression: 'CompressionOptions', storage_options: 'StorageOptions')",
  "references": null,
  "logo": "logo.png",
  "qa": "pandas.io.xml._XMLFrameParser",
  "arbitrary": []
}