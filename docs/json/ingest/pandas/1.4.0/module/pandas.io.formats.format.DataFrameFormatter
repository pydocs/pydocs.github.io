{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "BlockQuote",
          "data": {
            "value": [
              ".. versionchanged:: 1.2.0"
            ]
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "sparsify"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "sparsify"
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              },
              {
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "index_names"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "index_names"
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              },
              {
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "justify"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "justify"
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              },
              {
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "max_rows"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "max_rows"
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              },
              {
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "max_cols"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "max_cols"
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              },
              {
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "show_dimensions"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "show_dimensions"
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              },
              {
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "decimal"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "Paragraph",
                    "data": {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "decimal"
                          }
                        }
                      ],
                      "inner": []
                    }
                  }
                ]
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "str or None",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If buf is None, returns the result as a string. Otherwise returns None."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Class for processing dataframe formatting options and data. Parameters ---------- buf : str, Path or StringIO-like, optional, default None     Buffer to write to. If None, the output is returned as a string. columns : sequence, optional, default None     The subset of columns to write. Writes all columns by default. col_space : %(col_space_type)s, optional     %(col_space)s. header : %(header_type)s, optional     %(header)s. index : bool, optional, default True     Whether to print index (row) labels. na_rep : str, optional, default 'NaN'     String representation of "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "NaN"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " to use. formatters : list, tuple or dict of one-param. functions, optional     Formatter functions to apply to columns' elements by position or     name.     The result of each function must be a unicode string.     List/tuple must be of length equal to the number of columns. float_format : one-parameter function, optional, default None     Formatter function to apply to columns' elements if they are     floats. This function must return a unicode string and will be     applied only to the non-"
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "NaN"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " elements, with "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "NaN"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " being     handled by "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "na_rep"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Returns"
  ],
  "item_file": "/pandas/io/formats/format.py",
  "item_line": 554,
  "item_type": "<class 'type'>",
  "aliases": [
    "pandas.core.generic.DataFrameFormatter"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "1.4.0",
  "signature": "DataFrameFormatter(frame: 'DataFrame', columns: 'Sequence[str] | None' = None, col_space: 'ColspaceArgType | None' = None, header: 'bool | Sequence[str]' = True, index: 'bool' = True, na_rep: 'str' = 'NaN', formatters: 'FormattersType | None' = None, justify: 'str | None' = None, float_format: 'FloatFormatType | None' = None, sparsify: 'bool | None' = None, index_names: 'bool' = True, max_rows: 'int | None' = None, min_rows: 'int | None' = None, max_cols: 'int | None' = None, show_dimensions: 'bool | str' = False, decimal: 'str' = '.', bold_rows: 'bool' = False, escape: 'bool' = True)",
  "references": null,
  "logo": "logo.png",
  "qa": "pandas.io.formats.format.DataFrameFormatter",
  "arbitrary": []
}