{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "In comparison to "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "network"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", this assumes an added contract to your test: you must assert that, under normal conditions, your test will ONLY fail if it does not have network connectivity."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "You can call this in 3 ways: as a standard decorator, with keyword arguments, or with a positional argument that is the url to check."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "BulletList",
          "data": {
            "value": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "raise_on_error"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " supersedes "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "check_before_test"
                        ]
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "t",
            "type_": "callable",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The test requiring network connectivity."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "url",
            "type_": "path",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The url to test via "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "pandas.io.common.urlopen"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " to check for connectivity. Defaults to 'https://www.google.com'."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "raise_on_error",
            "type_": "bool",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If True, never catches errors."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "check_before_test",
            "type_": "bool",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If True, checks connectivity before running the test case."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "error_classes",
            "type_": "tuple or Exception",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "error classes to ignore. If not in "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "error_classes"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", raises the error. defaults to IOError. Be careful about changing the error classes here."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "skip_errnos",
            "type_": "iterable of int",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Any exception that has .errno or .reason.erno set to one of these values will be skipped with an appropriate message."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "_skip_on_messages: iterable of string",
            "type_": "",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "any exception e for which one of the strings is a substring of str(e) will be skipped with an appropriate message. Intended to suppress errors where an errno isn't available."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "t",
            "type_": "callable",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The decorated test "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "t"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", with checks for connectivity errors."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Label a test as requiring network connection and, if an error is encountered, only raise if it does not find a network connection."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Notes",
    "Returns",
    "Examples"
  ],
  "item_file": "/pandas/_testing/_io.py",
  "item_line": 104,
  "item_type": "<class 'function'>",
  "aliases": [
    "pandas._testing.network"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Tests decorated with @network will fail if it's possible to make a network connection to another URL (defaults to google.com)::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> from pandas._testing import network",
            ">>> from pandas.io.common import urlopen",
            ">>> @network",
            "... def test_network():",
            "...     with urlopen(\"rabbit://bonanza.com\"):",
            "...         pass",
            "Traceback",
            "   ...",
            "URLError: <urlopen error unknown url type: rabit>"
          ]
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            "You can specify alternative URLs::"
          ]
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> @network(\"https://www.yahoo.com\")",
            "... def test_something_with_yahoo():",
            "...    raise IOError(\"Failure Message\")",
            ">>> test_something_with_yahoo()",
            "Traceback (most recent call last):",
            "    ...",
            "IOError: Failure Message"
          ]
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "If you set check_before_test, it will check the url first and not run the test on failure::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> @network(\"failing://url.blaher\", check_before_test=True)",
            "... def test_something():",
            "...     print(\"I ran!\")",
            "...     raise ValueError(\"Failure\")",
            ">>> test_something()",
            "Traceback (most recent call last):",
            "    ..."
          ]
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Errors not related to networking will always be raised."
              }
            }
          ],
          "inner": []
        }
      }
    ],
    "title": null
  },
  "see_also": [],
  "version": "1.3.4",
  "signature": "network(t, url='https://www.google.com', raise_on_error=False, check_before_test=False, error_classes=None, skip_errnos=(101, 111, 110, 104, 54, 60), _skip_on_messages=('timed out', 'Server Hangup', 'HTTP Error 503: Service Unavailable', '502: Proxy Error', 'HTTP Error 502: internal error', 'HTTP Error 502', 'HTTP Error 503', 'HTTP Error 403', 'HTTP Error 400', 'Temporary failure in name resolution', 'Name or service not known', 'Connection refused', 'certificate verify'))",
  "references": null,
  "logo": "logo.png",
  "qa": "pandas._testing._io.network",
  "arbitrary": []
}