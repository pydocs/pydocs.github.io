{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Use "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    ".pipe"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " when chaining together functions that expect Series, DataFrames or GroupBy objects. Instead of writing"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> func(g(h(df), arg1=a), arg2=b, arg3=c)  # doctest: +SKIP",
                  "_number": 0,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "You can write"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> (df.pipe(h)",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "...    .pipe(g, arg1=a)",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "...    .pipe(func, arg2=b, arg3=c)",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "... )  # doctest: +SKIP",
                  "_number": 3,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "If you have a function that takes the data as (say) the second argument, pass a tuple indicating which keyword expects the data. For example, suppose "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "f"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " takes its data as "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "arg2"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ":"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> (df.pipe(h)",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "...    .pipe(g, arg1=a)",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "...    .pipe((func, 'arg2'), arg1=a, arg3=c)",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "...  )  # doctest: +SKIP",
                  "_number": 3,
                  "_offset": 0
                }
              ]
            }
          }
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "func",
            "type_": "function",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Function to apply to the Series/DataFrame. "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "args"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "kwargs"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are passed into "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "func"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". Alternatively a "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "(callable, data_keyword)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " tuple where "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "data_keyword"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is a string indicating the keyword of "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "callable"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " that expects the Series/DataFrame."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "args",
            "type_": "iterable, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Positional arguments passed into "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "func"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "kwargs",
            "type_": "mapping, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A dictionary of keyword arguments passed into "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "func"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "object",
            "type_": "the return type of ``func``.",
            "desc": []
          }
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Apply func(self, \\*args, \\*\\*kwargs)."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes"
  ],
  "item_file": "/pandas/core/generic.py",
  "item_line": 5372,
  "item_type": "<class 'function'>",
  "aliases": [
    "pandas.core.frame.NDFrame.pipe"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [
    {
      "name": {
        "name": "DataFrame.apply",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Apply a function along input axis of DataFrame."
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    },
    {
      "name": {
        "name": "DataFrame.applymap",
        "ref": "pandas.core.frame.DataFrame.applymap",
        "exists": true
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Apply a function elementwise on a whole DataFrame."
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    },
    {
      "name": {
        "name": "Series.map",
        "ref": "pandas.core.series.Series.map",
        "exists": true
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Apply a mapping correspondence on a "
              }
            },
            {
              "type": "Directive",
              "data": {
                "value": [
                  "~pandas.Series"
                ],
                "domain": null,
                "role": "class"
              }
            },
            {
              "type": "Words",
              "data": {
                "value": "."
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    }
  ],
  "version": "1.3.4",
  "signature": "pipe(self, func: 'Callable[..., T] | tuple[Callable[..., T], str]', *args, **kwargs) -> 'T'",
  "references": null,
  "logo": "logo.png",
  "qa": "pandas.core.generic.NDFrame.pipe",
  "arbitrary": []
}