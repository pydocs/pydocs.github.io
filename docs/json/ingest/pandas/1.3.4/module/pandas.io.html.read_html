{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Before using this function you should read the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "gotchas about the\nHTML parsing libraries <io.html.gotchas>"
                  ],
                  "domain": null,
                  "role": "ref"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Expect to do some cleanup after you call this function. For example, you might need to manually assign column names if the column names are converted to NaN when you pass the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "header=0"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " argument. We try to assume as little as possible about the structure of the table and push the idiosyncrasies of the HTML contained in the table to the user."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This function searches for "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "<table>"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " elements and only for "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "<tr>"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "<th>"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " rows and "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "<td>"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " elements within each "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "<tr>"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " or "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "<th>"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " element in the table. "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "<td>"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " stands for \"table data\". This function attempts to properly handle "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "colspan"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "rowspan"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " attributes. If the function has a "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "<thead>"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " argument, it is used to construct the header, otherwise the function attempts to find the header within the body (by putting rows with only "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "<th>"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " elements into the header)."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Similar to "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "~read_csv",
                  "reference": {
                    "module": "pandas",
                    "version": "1.3.4",
                    "kind": "module",
                    "path": "pandas.io.parsers.readers.read_csv"
                  },
                  "kind": "module",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " the "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "header",
                  "reference": {
                    "module": null,
                    "version": null,
                    "kind": "local",
                    "path": "header"
                  },
                  "kind": "local",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " argument is applied "
                }
              },
              {
                "type": "Strong",
                "data": {
                  "content": {
                    "value": "after"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "skiprows",
                  "reference": {
                    "module": null,
                    "version": null,
                    "kind": "local",
                    "path": "skiprows"
                  },
                  "kind": "local",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is applied."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This function will "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "always"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " return a list of "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "DataFrame",
                  "reference": {
                    "module": "pandas",
                    "version": "1.3.4",
                    "kind": "module",
                    "path": "pandas.core.frame.DataFrame"
                  },
                  "kind": "module",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "or"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " it will fail, e.g., it will "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "not"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " return an empty list."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "io",
            "type_": "str, path object or file-like object",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A URL, a file-like object, or a raw string containing HTML. Note that lxml only accepts the http, ftp and file url protocols. If you have a URL that starts with "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'https'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " you might try removing the "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'s'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "match",
            "type_": "str or compiled regular expression, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The set of tables containing text matching this regex or string will be returned. Unless the HTML is extremely simple you will probably need to pass a non-empty string here. Defaults to '.+' (match any non-empty string). The default value will return all tables contained on a page. This value is converted to a regular expression so that there is consistent behavior between Beautiful Soup and lxml."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "flavor",
            "type_": "str, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The parsing engine to use. 'bs4' and 'html5lib' are synonymous with each other, they are both there for backwards compatibility. The default of "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "None"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " tries to use "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "lxml"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " to parse and if that fails it falls back on "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "bs4"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " + "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "html5lib"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "header",
            "type_": "int or list-like, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The row (or list of rows for a "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~pandas.MultiIndex"
                        ],
                        "domain": null,
                        "role": "class"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ") to use to make the columns headers."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "index_col",
            "type_": "int or list-like, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The column (or list of columns) to use to create the index."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "skiprows",
            "type_": "int, list-like or slice, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Number of rows to skip after parsing the column integer. 0-based. If a sequence of integers or a slice is given, will skip the rows indexed by that sequence.  Note that a single element sequence means 'skip the nth row' whereas an integer means 'skip n rows'."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "attrs",
            "type_": "dict, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "This is a dictionary of attributes that you can pass to use to identify the table in the HTML. These are not checked for validity before being passed to lxml or Beautiful Soup. However, these attributes must be valid HTML table attributes to work correctly. For example, ::      "
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "BlockVerbatim",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": "attrs = {'id': 'table'}",
                        "_number": 0,
                        "_offset": 0
                      }
                    ]
                  }
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "is a valid attribute dictionary because the 'id' HTML tag attribute is a valid HTML attribute for "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "any"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " HTML tag as per "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "this document\n<https://html.spec.whatwg.org/multipage/dom.html#global-attributes>`"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". ::      "
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "BlockVerbatim",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": "attrs = {'asdf': 'table'}",
                        "_number": 0,
                        "_offset": 0
                      }
                    ]
                  }
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "is "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "not"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " a valid attribute dictionary because 'asdf' is not a valid HTML attribute even if it is a valid XML attribute.  Valid HTML 4.01 table attributes can be found "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "here\n<http://www.w3.org/TR/REC-html40/struct/tables.html#h-11.2>`"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". A working draft of the HTML 5 spec can be found "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "here\n<https://html.spec.whatwg.org/multipage/tables.html>`"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". It contains the latest information on table attributes for the modern web."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "parse_dates",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "See "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "~read_csv",
                        "reference": {
                          "module": "pandas",
                          "version": "1.3.4",
                          "kind": "module",
                          "path": "pandas.io.parsers.readers.read_csv"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " for more details."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "thousands",
            "type_": "str, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Separator to use to parse thousands. Defaults to "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "','"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "encoding",
            "type_": "str, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The encoding used to decode the web page. Defaults to "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "None"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ".``None`` preserves the previous encoding behavior, which depends on the underlying parser library (e.g., the parser library will try to use the encoding provided by the document)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "decimal",
            "type_": "str, default '.'",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Character to recognize as decimal point (e.g. use ',' for European data)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "converters",
            "type_": "dict, default None",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Dict of functions for converting values in certain columns. Keys can either be integers or column labels, values are functions that take one input argument, the cell (not column) content, and return the transformed content."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "na_values",
            "type_": "iterable, default None",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Custom NA values."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "keep_default_na",
            "type_": "bool, default True",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If na_values are specified and keep_default_na is False the default NaN values are overridden, otherwise they're appended to."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "displayed_only",
            "type_": "bool, default True",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Whether elements with \"display: none\" should be parsed."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "dfs",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A list of DataFrames."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Read HTML tables into a "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "list"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " of "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "DataFrame"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " objects."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    {
      "module": "pandas",
      "version": "1.3.4",
      "kind": "module",
      "path": "pandas.io.parsers.readers.read_csv"
    },
    {
      "module": "pandas",
      "version": "1.3.4",
      "kind": "module",
      "path": "pandas.core.frame.DataFrame"
    }
  ],
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "See Also",
    "Notes",
    "Examples"
  ],
  "item_file": "/pandas/io/html.py",
  "item_line": 937,
  "item_type": "<class 'function'>",
  "aliases": [
    "pandas.read_html"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "See the "
              }
            },
            {
              "type": "Directive",
              "data": {
                "value": [
                  "read_html documentation in the IO section of the docs\n<io.read_html>"
                ],
                "domain": null,
                "role": "ref"
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " for some examples of reading in HTML tables."
              }
            }
          ],
          "inner": []
        }
      }
    ],
    "title": null
  },
  "see_also": [
    {
      "name": {
        "name": "read_csv",
        "ref": "pandas.io.parsers.readers.read_csv",
        "exists": true
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Read a comma-separated values (csv) file into DataFrame."
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    }
  ],
  "version": "1.3.4",
  "signature": "read_html(io: 'FilePathOrBuffer', match: 'str | Pattern' = '.+', flavor: 'str | None' = None, header: 'int | Sequence[int] | None' = None, index_col: 'int | Sequence[int] | None' = None, skiprows: 'int | Sequence[int] | slice | None' = None, attrs: 'dict[str, str] | None' = None, parse_dates: 'bool' = False, thousands: 'str | None' = ',', encoding: 'str | None' = None, decimal: 'str' = '.', converters: 'dict | None' = None, na_values=None, keep_default_na: 'bool' = True, displayed_only: 'bool' = True) -> 'list[DataFrame]'",
  "references": null,
  "logo": "logo.png",
  "qa": "pandas.io.html.read_html",
  "arbitrary": []
}