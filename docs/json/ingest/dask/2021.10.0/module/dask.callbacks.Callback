{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Create a callback with functions of the following signatures:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": ">>> def start(dsk):\n...     pass\n>>> def start_state(dsk, state):\n...     pass\n>>> def pretask(key, dsk, state):\n...     pass\n>>> def posttask(key, result, dsk, state, worker_id):\n...     pass\n>>> def finish(dsk, state, failed):\n...     pass"
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "You may then construct a callback object with any number of them"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": ">>> cb = Callback(pretask=pretask, finish=finish)"
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "And use it either as a context manager over a compute/get call"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": ">>> with cb:            # doctest: +SKIP\n...     x.compute()"
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Or globally with the "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "register"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " method"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": ">>> cb.register()\n>>> cb.unregister()"
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Alternatively subclass the "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "Callback"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " class with your own methods."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": ">>> class PrintKeys(Callback):\n...     def _pretask(self, key, dask, state):\n...         print(\"Computing: {0}!\".format(repr(key)))"
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": ">>> with PrintKeys():   # doctest: +SKIP\n...     x.compute()"
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Base class for using the callback mechanism"
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/dask/callbacks.py",
  "item_line": 6,
  "item_type": "<class 'type'>",
  "aliases": [
    "dask.callbacks.Callback"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "2021.10.0",
  "signature": "Callback(start=None, start_state=None, pretask=None, posttask=None, finish=None)",
  "references": null,
  "logo": "logo.png",
  "qa": "dask.callbacks.Callback",
  "arbitrary": []
}