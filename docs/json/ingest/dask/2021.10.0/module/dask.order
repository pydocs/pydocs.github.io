{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "To remove in the future \u2013\u2013 dask.order"
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/dask/order.py",
  "item_line": 0,
  "item_type": "<class 'module'>",
  "aliases": [
    "dask.order"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "2021.10.0",
  "signature": null,
  "references": null,
  "logo": "logo.png",
  "qa": "dask.order",
  "arbitrary": [
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Static order of nodes in dask graph"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Dask makes decisions on what tasks to prioritize both"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BulletList",
          "data": {
            "value": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Dynamically at runtime"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Statically before runtime"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Dynamically we prefer to run tasks that were just made available.  However when several tasks become available at the same time we have an opportunity to break ties in an intelligent way"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockQuote",
          "data": {
            "value": [
              "d",
              "|"
            ]
          }
        },
        {
          "type": "DefList",
          "data": {
            "children": [
              {
                "dt": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "b   c"
                      }
                    }
                  ],
                  "inner": []
                },
                "dd": [
                  {
                    "type": "DefList",
                    "data": {
                      "children": [
                        {
                          "dt": {
                            "inline": [
                              {
                                "type": "Words",
                                "data": {
                                  "value": "\\ /"
                                }
                              }
                            ],
                            "inner": []
                          },
                          "dd": [
                            {
                              "type": "Paragraph",
                              "data": {
                                "inline": [
                                  {
                                    "type": "Words",
                                    "data": {
                                      "value": "a"
                                    }
                                  }
                                ],
                                "inner": []
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "For example after we finish "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "a"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " we can choose to run either "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "b"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " or "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "c"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " next.  Making small decisions like this can greatly affect our performance, especially because the order in which we run tasks affects the order in which we can release memory, which operationally we find to have a large affect on many computation.  We want to run tasks in such a way that we keep only a small amount of data in memory at any given time."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "And so we create a total ordering over all nodes to serve as a tie breaker.  We represent this ordering with a dictionary mapping keys to integer values. Lower scores have higher priority.  These scores correspond to the order in which a sequential scheduler would visit each node."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockQuote",
          "data": {
            "value": [
              "{'a': 0,",
              " 'c': 1,",
              " 'd': 2,",
              " 'b': 3}"
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "There are several ways in which we might order our keys.  This is a nuanced process that has to take into account many different kinds of workflows, and operate efficiently in linear time.  We strongly recommend that readers look at the docstrings of tests in dask/tests/test_order.py.  These tests usually have graph types laid out very carefully to show the kinds of situations that often arise, and the order we would like to be determined."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": "Static Ordering"
    },
    {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Work towards "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "small goals"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " with "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "big steps"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "EnumeratedList",
          "data": {
            "value": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Strong",
                      "data": {
                        "content": {
                          "value": "Small goals"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ": prefer tasks that have few total dependents and whose final     dependents have few total dependencies."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "We prefer to prioritize those tasks that help branches of computation that     can terminate quickly."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "With more detail, we compute the total number of dependencies that each     task depends on (both its own dependencies, and the dependencies of its     dependencies, and so on), and then we choose those tasks that drive towards     results with a low number of total dependencies.  We choose to prioritize     tasks that work towards finishing shorter computations first."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "EnumeratedList",
          "data": {
            "value": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Strong",
                      "data": {
                        "content": {
                          "value": "Big steps"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ": prefer tasks with many dependents"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "However, many tasks work towards the same final dependents.  Among those,     we choose those tasks with the most work left to do.  We want to finish     the larger portions of a sub-computation before we start on the smaller     ones."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "EnumeratedList",
          "data": {
            "value": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Strong",
                      "data": {
                        "content": {
                          "value": "Name comparison"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ": break ties with key name"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Often graphs are made with regular keynames.  When no other structural     difference exists between two keys, use the key name to break ties.     This relies on the regularity of graph constructors like dask.array to be a     good proxy for ordering.  This is usually a good idea and a sane default."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": "Policy"
    }
  ]
}