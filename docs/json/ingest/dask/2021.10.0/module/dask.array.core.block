{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Blocks in the innermost lists are concatenated along the last dimension (-1), then these are concatenated along the second-last dimension (-2), and so on until the outermost list is reached"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Blocks can be of any dimension, but will not be broadcasted using the normal rules. Instead, leading axes of size 1 are inserted, to make "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "block.ndim"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " the same for all blocks. This is primarily useful for working with scalars, and means that code like "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "block([v, 1])"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is valid, where "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "v.ndim == 1"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "When the nested list is two levels deep, this allows block matrices to be constructed from their components."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "When called with only scalars, "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "block"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is equivalent to an ndarray call. So "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "block([[1, 2], [3, 4]])"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is equivalent to "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "array([[1, 2], [3, 4]])"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This function does not enforce that the blocks lie on a fixed grid. "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "block([[a, b], [c, d]])"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is not restricted to arrays of the form::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": "AAAbb\nAAAbb\ncccDD"
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "But is also allowed to produce, for some "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "a, b, c, d"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": "AAAbb\nAAAbb\ncDDDD"
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Since concatenation happens along the last axis first, "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "block",
                  "reference": {
                    "module": "dask",
                    "version": "2021.10.0",
                    "kind": "module",
                    "path": "dask.array.core.block"
                  },
                  "kind": "module",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is _not_ capable of producing the following directly::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "value": "AAAbb\ncccbb\ncccDD"
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Matlab's \"square bracket stacking\", "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "[A, B, ...; p, q, ...]"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", is equivalent to "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "block([[A, B, ...], [p, q, ...]])"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "arrays",
            "type_": "nested list of array_like or scalars (but not tuples)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If passed a single ndarray or scalar (a nested list of depth 0), this is returned unmodified (and not copied)."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Elements shapes must match along the appropriate axes (without broadcasting), but leading 1s will be prepended to the shape as necessary to make the dimensions match."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "allow_unknown_chunksizes: bool",
            "type_": "",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Allow unknown chunksizes, such as come from converting from dask dataframes.  Dask.array is unable to verify that chunks line up.  If data comes from differently aligned sources then this can cause unexpected results."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "ValueError",
            "desc": [
              {
                "type": "BulletList",
                "data": {
                  "value": [
                    {
                      "type": "Paragraph",
                      "data": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "If list depths are mismatched - for instance, "
                            }
                          },
                          {
                            "type": "Verbatim",
                            "data": {
                              "value": [
                                "[[a, b], c]"
                              ]
                            }
                          },
                          {
                            "type": "Words",
                            "data": {
                              "value": " is   illegal, and should be spelt "
                            }
                          },
                          {
                            "type": "Verbatim",
                            "data": {
                              "value": [
                                "[[a, b], [c]]"
                              ]
                            }
                          }
                        ],
                        "inner": []
                      }
                    },
                    {
                      "type": "Paragraph",
                      "data": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "If lists are empty - for instance, "
                            }
                          },
                          {
                            "type": "Verbatim",
                            "data": {
                              "value": [
                                "[[a, b], []]"
                              ]
                            }
                          }
                        ],
                        "inner": []
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "block_array",
            "type_": "ndarray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The array assembled from the given blocks."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The dimensionality of the output is equal to the greatest of: * the dimensionality of all the inputs * the depth to which the input list is nested"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Assemble an nd-array from nested lists of blocks."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    {
      "module": "dask",
      "version": "2021.10.0",
      "kind": "module",
      "path": "dask.array.core.block"
    }
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Raises",
    "See Also",
    "Notes"
  ],
  "item_file": "/dask/array/core.py",
  "item_line": 3708,
  "item_type": "<class 'function'>",
  "aliases": [
    "dask.array.block"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [
    {
      "name": {
        "name": "concatenate",
        "ref": "dask.array.core.concatenate",
        "exists": true
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Join a sequence of arrays together."
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    },
    {
      "name": {
        "name": "dstack",
        "ref": "dask.array.routines.dstack",
        "exists": true
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Stack arrays in sequence depth wise (along third dimension)."
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    },
    {
      "name": {
        "name": "hstack",
        "ref": "dask.array.routines.hstack",
        "exists": true
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Stack arrays in sequence horizontally (column wise)."
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    },
    {
      "name": {
        "name": "stack",
        "ref": "dask.array.core.stack",
        "exists": true
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Stack arrays in sequence along a new dimension."
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    },
    {
      "name": {
        "name": "vsplit",
        "ref": null,
        "exists": null
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Split array into a list of multiple sub-arrays vertically."
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    },
    {
      "name": {
        "name": "vstack",
        "ref": "dask.array.routines.vstack",
        "exists": true
      },
      "descriptions": [
        {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Stack arrays in sequence vertically (row wise)."
              }
            }
          ],
          "inner": []
        }
      ],
      "type": null
    }
  ],
  "version": "2021.10.0",
  "signature": "block(arrays, allow_unknown_chunksizes=False)",
  "references": null,
  "logo": "logo.png",
  "qa": "dask.array.core.block",
  "arbitrary": []
}