{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Map a function in parallel across an array."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Split an array into possibly overlapping chunks of a given depth and boundary type, call the given function in parallel on the chunks, combine the chunks and return the resulting array."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "function",
            "type_": "function",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Function to be mapped which takes an array as an argument."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "array",
            "type_": "numpy array or dask array",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Array which the function will be applied to."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "chunks",
            "type_": "int, tuple, or tuple of tuples, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A single integer is interpreted as the length of one side of a square chunk that should be tiled across the array.  One tuple of length "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "array.ndim"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " represents the shape of a chunk, and it is tiled across the array.  A list of tuples of length "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "ndim"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", where each sub-tuple is a sequence of chunk sizes along the corresponding dimension. If None, the array is broken up into chunks based on the number of available cpus. More information about chunks is in the documentation "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "here",
                          " ",
                          "<https",
                          ":",
                          "//dask.pydata.org/en/latest/array-design.html>"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "_."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "depth",
            "type_": "int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Integer equal to the depth of the added boundary cells. Defaults to zero."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "mode",
            "type_": "{'reflect', 'symmetric', 'periodic', 'wrap', 'nearest', 'edge'}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "type of external boundary padding."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "extra_arguments",
            "type_": "tuple, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Tuple of arguments to be passed to the function."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "extra_keywords",
            "type_": "dictionary, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Dictionary of keyword arguments to be passed to the function."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "dtype",
            "type_": "data-type or None, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The data-type of the "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "function",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "function"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " output. If None, Dask will attempt to infer this by calling the function on data of shape "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "(1,)",
                          " ",
                          "*",
                          " ",
                          "ndim"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". For functions expecting RGB or multichannel data this may be problematic. In such cases, the user should manually specify this dtype argument instead."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Admonition",
                "data": {
                  "kind": "versionadded",
                  "title": " 0.18",
                  "children": [
                    {
                      "inline": [
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "dtype"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": " was added in 0.18."
                          }
                        }
                      ],
                      "inner": []
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "multichannel",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "chunks",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "chunks"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is None and "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "multichannel",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "multichannel"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is True, this function will keep only a single chunk along the channels axis. When "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "depth",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "depth"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is specified as a scalar value, that depth will be applied only to the non-channels axes (a depth of 0 will be used along the channels axis). If the user manually specified both "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "chunks",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "chunks"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and a "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "depth",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "depth"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " tuple, then this argument will have no effect."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Admonition",
                "data": {
                  "kind": "versionadded",
                  "title": " 0.18",
                  "children": [
                    {
                      "inline": [
                        {
                          "type": "Verbatim",
                          "data": {
                            "value": [
                              "multichannel"
                            ]
                          }
                        },
                        {
                          "type": "Words",
                          "data": {
                            "value": " was added in 0.18."
                          }
                        }
                      ],
                      "inner": []
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "compute",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "True"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", compute eagerly returning a NumPy Array. If "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "False"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", compute lazily returning a Dask Array. If "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "None"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " (default), compute based on array type provided (eagerly for NumPy Arrays and lazily for Dask Arrays)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "out",
            "type_": "ndarray or dask Array",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Returns the result of the applying the operation. Type is dependent on the "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "compute"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " argument."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Numpy edge modes 'symmetric', 'wrap', and 'edge' are converted to the equivalent "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "dask"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " boundary modes 'reflect', 'periodic' and 'nearest', respectively. Setting "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "compute=False"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " can be useful for chaining later operations. For example region selection to preview a result or storing large data to disk instead of loading in memory."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Notes"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3-intel/envs/papyri/lib/python3.9/site-packages/skimage/util/apply_parallel.py",
  "item_line": 58,
  "item_type": "<class 'function'>",
  "aliases": [
    "skimage.util.apply_parallel"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "0.18.3",
  "signature": "apply_parallel(function, array, chunks=None, depth=0, mode=None, extra_arguments=(), extra_keywords={}, *, dtype=None, multichannel=False, compute=None)",
  "references": null,
  "logo": "logo.png",
  "qa": "skimage.util.apply_parallel.apply_parallel",
  "arbitrary": []
}