{
  "_content": {
    "Attributes": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "offsets",
            "type_": "ndarray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Equivalent to the "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "offsets",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "offsets"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " provided to the constructor, or if none were so provided, the offsets created for the requested n-d neighborhood. These are useful for interpreting the "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": "traceback",
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " array returned by the find_costs() method."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Given an n-d costs array, this class can be used to find the minimum-cost path through that array from any set of points to any other set of points. Basic usage is to initialize the class and call find_costs() with a one or more starting indices (and an optional list of end indices). After that, call traceback() one or more times to find the path from any given end-position to the closest starting index. New paths through the same costs array can be found by calling find_costs() repeatedly."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The cost of a path is calculated simply as the sum of the values of the "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "costs",
                  "reference": {
                    "module": null,
                    "version": null,
                    "kind": "local",
                    "path": "costs"
                  },
                  "kind": "local",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " array at each point on the path. The class MCP_Geometric, on the other hand, accounts for the fact that diagonal vs. axial moves are of different lengths, and weights the path cost accordingly."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Array elements with infinite or negative costs will simply be ignored, as will paths whose cumulative cost overflows to infinite."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "costs",
            "type_": "ndarray",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "offsets",
            "type_": "iterable, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A list of offset tuples: each offset specifies a valid move from a given n-d position. If not provided, offsets corresponding to a singly- or fully-connected n-d neighborhood will be constructed with make_offsets(), using the "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "fully_connected",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "fully_connected"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " parameter value."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "fully_connected",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If no "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "offsets",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "offsets"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are provided, this determines the connectivity of the generated neighborhood. If true, the path may go along diagonals between elements of the "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "costs",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "costs"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " array; otherwise only axial moves are permitted."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "sampling",
            "type_": "tuple, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "For each dimension, specifies the distance between two cells/voxels. If not given or None, the distance is assumed unit."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "A class for finding the minimum cost path through a given n-d costs array."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Signature",
    "Summary",
    "Extended Summary",
    "Parameters",
    "Attributes"
  ],
  "item_file": "/skimage/graph/_mcp.cpython-39-darwin.so",
  "item_line": null,
  "item_type": "<class 'type'>",
  "aliases": [
    "skimage.graph.MCP"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "0.17.2",
  "signature": "MCP(costs, offsets=None, fully_connected=True, sampling=None)",
  "references": null,
  "logo": "logo.png",
  "qa": "skimage.graph._mcp.MCP",
  "arbitrary": []
}