{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The wrapped method may explicitly use the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "classmethod"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " decorator (which must become before this decorator), or the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "classmethod"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " may be omitted (it is implicit through use of this decorator)."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Admonition",
          "data": {
            "kind": "note",
            "title": "",
            "children": [
              {
                "inline": [
                  {
                    "type": "Words",
                    "data": {
                      "value": "classproperty only works for *read - only* properties. It does not currently allow writeable / deletable properties, due to subtleties of how Python descriptors work. In order to implement such properties on a class a metaclass for that class must be implemented. "
                    }
                  }
                ],
                "inner": []
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "fget",
            "type_": "callable",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The function that computes the value of this property (in particular, the function when this is used as a decorator) a la "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "property"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "doc",
            "type_": "str, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The docstring for the property--by default inherited from the getter function."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "lazy",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If True, caches the value returned by the first call to the getter function, so that it is only called once (used for lazy evaluation of an attribute).  This is analogous to "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "lazyproperty",
                        "reference": {
                          "module": "astropy",
                          "version": "5.0",
                          "kind": "module",
                          "path": "astropy.utils.decorators.lazyproperty"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ".  The "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "lazy"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " argument can also be used when "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "classproperty",
                        "reference": {
                          "module": "astropy",
                          "version": "5.0",
                          "kind": "module",
                          "path": "astropy.utils.decorators.classproperty"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is used as a decorator (see the third example below).  When used in the decorator syntax this "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "must"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " be passed in as a keyword argument."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Similar to "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "property"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", but allows class-level properties.  That is, a property whose getter is like a "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "classmethod"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    {
      "module": "astropy",
      "version": "5.0",
      "kind": "module",
      "path": "astropy.utils.decorators.lazyproperty"
    },
    {
      "module": "astropy",
      "version": "5.0",
      "kind": "module",
      "path": "astropy.utils.decorators.classproperty"
    }
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Examples"
  ],
  "item_file": "/astropy/utils/decorators.py",
  "item_line": 556,
  "item_type": "<class 'type'>",
  "aliases": [
    "astropy.utils.classproperty"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> class Foo:",
            "...     _bar_internal = 1",
            "...     @classproperty",
            "...     def bar(cls):",
            "...         return cls._bar_internal + 1",
            "...",
            ">>> Foo.bar",
            "2",
            ">>> foo_instance = Foo()",
            ">>> foo_instance.bar",
            "2",
            ">>> foo_instance._bar_internal = 2",
            ">>> foo_instance.bar  # Ignores instance attributes",
            "2"
          ]
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "As previously noted, a "
              }
            },
            {
              "type": "Link",
              "data": {
                "value": "classproperty",
                "reference": {
                  "module": "astropy",
                  "version": "5.0",
                  "kind": "module",
                  "path": "astropy.utils.decorators.classproperty"
                },
                "kind": "module",
                "exists": true
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " is limited to implementing read-only attributes::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> class Foo:",
            "...     _bar_internal = 1",
            "...     @classproperty",
            "...     def bar(cls):",
            "...         return cls._bar_internal",
            "...     @bar.setter",
            "...     def bar(cls, value):",
            "...         cls._bar_internal = value",
            "...",
            "Traceback (most recent call last):",
            "...",
            "NotImplementedError: classproperty can only be read-only; use a",
            "metaclass to implement modifiable class-level properties"
          ]
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "When the "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "lazy"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " option is used, the getter is only called once::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> class Foo:",
            "...     @classproperty(lazy=True)",
            "...     def bar(cls):",
            "...         print(\"Performing complicated calculation\")",
            "...         return 1",
            "...",
            ">>> Foo.bar",
            "Performing complicated calculation",
            "1",
            ">>> Foo.bar",
            "1"
          ]
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "If a subclass inherits a lazy "
              }
            },
            {
              "type": "Link",
              "data": {
                "value": "classproperty",
                "reference": {
                  "module": "astropy",
                  "version": "5.0",
                  "kind": "module",
                  "path": "astropy.utils.decorators.classproperty"
                },
                "kind": "module",
                "exists": true
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " the property is still re-evaluated for the subclass::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> class FooSub(Foo):",
            "...     pass",
            "...",
            ">>> FooSub.bar",
            "Performing complicated calculation",
            "1",
            ">>> FooSub.bar",
            "1"
          ]
        }
      }
    ],
    "title": null
  },
  "see_also": [],
  "version": "5.0",
  "signature": "classproperty(fget=None, doc=None, lazy=False)",
  "references": null,
  "logo": "logo.png",
  "qa": "astropy.utils.decorators.classproperty",
  "arbitrary": []
}