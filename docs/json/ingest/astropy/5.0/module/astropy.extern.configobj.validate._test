{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> checks = [",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "...     '3, 6, min=1, max=3, test=list(a, b, c)',",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "...     '3',",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "...     '3, 6',",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": "...     '3,',",
                  "_number": 4,
                  "_offset": 0
                },
                {
                  "_line": "...     'min=1, test=\"a b c\"',",
                  "_number": 5,
                  "_offset": 0
                },
                {
                  "_line": "...     'min=5, test=\"a, b, c\"',",
                  "_number": 6,
                  "_offset": 0
                },
                {
                  "_line": "...     'min=1, max=3, test=\"a, b, c\"',",
                  "_number": 7,
                  "_offset": 0
                },
                {
                  "_line": "...     'min=-100, test=-99',",
                  "_number": 8,
                  "_offset": 0
                },
                {
                  "_line": "...     'min=1, max=3',",
                  "_number": 9,
                  "_offset": 0
                },
                {
                  "_line": "...     '3, 6, test=\"36\"',",
                  "_number": 10,
                  "_offset": 0
                },
                {
                  "_line": "...     '3, 6, test=\"a, b, c\"',",
                  "_number": 11,
                  "_offset": 0
                },
                {
                  "_line": "...     '3, max=3, test=list(\"a\", \"b\", \"c\")',",
                  "_number": 12,
                  "_offset": 0
                },
                {
                  "_line": "...     '''3, max=3, test=list(\"'a'\", 'b', \"x=(c)\")''',",
                  "_number": 13,
                  "_offset": 0
                },
                {
                  "_line": "...     \"test='x=fish(3)'\",",
                  "_number": 14,
                  "_offset": 0
                },
                {
                  "_line": "...    ]",
                  "_number": 15,
                  "_offset": 0
                },
                {
                  "_line": ">>> v = Validator({'test': _test})",
                  "_number": 16,
                  "_offset": 0
                },
                {
                  "_line": ">>> for entry in checks:",
                  "_number": 17,
                  "_offset": 0
                },
                {
                  "_line": "...     pprint(v.check(('test(%s)' % entry), 3))",
                  "_number": 18,
                  "_offset": 0
                },
                {
                  "_line": "(3, ('3', '6'), {'max': '3', 'min': '1', 'test': ['a', 'b', 'c']})",
                  "_number": 19,
                  "_offset": 0
                },
                {
                  "_line": "(3, ('3',), {})",
                  "_number": 20,
                  "_offset": 0
                },
                {
                  "_line": "(3, ('3', '6'), {})",
                  "_number": 21,
                  "_offset": 0
                },
                {
                  "_line": "(3, ('3',), {})",
                  "_number": 22,
                  "_offset": 0
                },
                {
                  "_line": "(3, (), {'min': '1', 'test': 'a b c'})",
                  "_number": 23,
                  "_offset": 0
                },
                {
                  "_line": "(3, (), {'min': '5', 'test': 'a, b, c'})",
                  "_number": 24,
                  "_offset": 0
                },
                {
                  "_line": "(3, (), {'max': '3', 'min': '1', 'test': 'a, b, c'})",
                  "_number": 25,
                  "_offset": 0
                },
                {
                  "_line": "(3, (), {'min': '-100', 'test': '-99'})",
                  "_number": 26,
                  "_offset": 0
                },
                {
                  "_line": "(3, (), {'max': '3', 'min': '1'})",
                  "_number": 27,
                  "_offset": 0
                },
                {
                  "_line": "(3, ('3', '6'), {'test': '36'})",
                  "_number": 28,
                  "_offset": 0
                },
                {
                  "_line": "(3, ('3', '6'), {'test': 'a, b, c'})",
                  "_number": 29,
                  "_offset": 0
                },
                {
                  "_line": "(3, ('3',), {'max': '3', 'test': ['a', 'b', 'c']})",
                  "_number": 30,
                  "_offset": 0
                },
                {
                  "_line": "(3, ('3',), {'max': '3', 'test': [\"'a'\", 'b', 'x=(c)']})",
                  "_number": 31,
                  "_offset": 0
                },
                {
                  "_line": "(3, (), {'test': 'x=fish(3)'})",
                  "_number": 32,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> v = Validator()",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": ">>> v.check('integer(default=6)', '3')",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "3",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": ">>> v.check('integer(default=6)', None, True)",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": "6",
                  "_number": 4,
                  "_offset": 0
                },
                {
                  "_line": ">>> v.get_default_value('integer(default=6)')",
                  "_number": 5,
                  "_offset": 0
                },
                {
                  "_line": "6",
                  "_number": 6,
                  "_offset": 0
                },
                {
                  "_line": ">>> v.get_default_value('float(default=6)')",
                  "_number": 7,
                  "_offset": 0
                },
                {
                  "_line": "6.0",
                  "_number": 8,
                  "_offset": 0
                },
                {
                  "_line": ">>> v.get_default_value('pass(default=None)')",
                  "_number": 9,
                  "_offset": 0
                },
                {
                  "_line": ">>> v.get_default_value(\"string(default='None')\")",
                  "_number": 10,
                  "_offset": 0
                },
                {
                  "_line": "'None'",
                  "_number": 11,
                  "_offset": 0
                },
                {
                  "_line": ">>> v.get_default_value('pass')",
                  "_number": 12,
                  "_offset": 0
                },
                {
                  "_line": "Traceback (most recent call last):",
                  "_number": 13,
                  "_offset": 0
                },
                {
                  "_line": "KeyError: 'Check \"pass\" has no default value.'",
                  "_number": 14,
                  "_offset": 0
                },
                {
                  "_line": ">>> v.get_default_value('pass(default=list(1, 2, 3, 4))')",
                  "_number": 15,
                  "_offset": 0
                },
                {
                  "_line": "['1', '2', '3', '4']",
                  "_number": 16,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> v = Validator()",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": ">>> v.check(\"pass(default=None)\", None, True)",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": ">>> v.check(\"pass(default='None')\", None, True)",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "'None'",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": ">>> v.check('pass(default=\"None\")', None, True)",
                  "_number": 4,
                  "_offset": 0
                },
                {
                  "_line": "'None'",
                  "_number": 5,
                  "_offset": 0
                },
                {
                  "_line": ">>> v.check('pass(default=list(1, 2, 3, 4))', None, True)",
                  "_number": 6,
                  "_offset": 0
                },
                {
                  "_line": "['1', '2', '3', '4']",
                  "_number": 7,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Bug test for unicode arguments >>> v = Validator() >>> v.check(unicode('string(min=4)'), unicode('test')) == unicode('test') True"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> v = Validator()",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": ">>> v.get_default_value(unicode('string(min=4, default=\"1234\")')) == unicode('1234')",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "True",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": ">>> v.check(unicode('string(min=4, default=\"1234\")'), unicode('test')) == unicode('test')",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": "True",
                  "_number": 4,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> v = Validator()",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": ">>> default = v.get_default_value('string(default=None)')",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": ">>> default == None",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "1",
                  "_number": 3,
                  "_offset": 0
                }
              ]
            }
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "A function that exists for test purposes."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/astropy/extern/configobj/validate.py",
  "item_line": 1336,
  "item_type": "<class 'function'>",
  "aliases": [
    "astropy.config.configuration.validate._test"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "5.0",
  "signature": "_test(value, *args, **keywargs)",
  "references": null,
  "logo": "logo.png",
  "qa": "astropy.extern.configobj.validate._test",
  "arbitrary": []
}