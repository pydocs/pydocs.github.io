{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The formatting works like "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "str.format"
                  ],
                  "domain": null,
                  "role": "meth"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and if the decorated object already has a docstring this docstring can be included in the new documentation if you use the "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "{__doc__}"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " placeholder. Its primary use is for reusing a "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "long"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " docstring in multiple functions when it is the same or only slightly different between them."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Using this decorator allows, for example Sphinx, to parse the correct docstring."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "docstring",
            "type_": "str or object or None",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The docstring that will replace the docstring of the decorated object. If it is an object like a function or class it will take the docstring of this object. If it is a string it will use the string itself. One special case is if the string is "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "None"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " then it will use the decorated functions docstring and formats it."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "args :",
            "type_": "",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "passed to "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "str.format"
                        ],
                        "domain": null,
                        "role": "meth"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "kwargs :",
            "type_": "",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "passed to "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "str.format"
                        ],
                        "domain": null,
                        "role": "meth"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". If the function has a (not empty) docstring the original docstring is added to the kwargs with the keyword "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'__doc__'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "ValueError",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If the "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "docstring"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " (or interpreted docstring if it was "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "None"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " or not a string) is empty."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "IndexError, KeyError",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If a placeholder in the (interpreted) "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "docstring"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " was not filled. see "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "str.format"
                        ],
                        "domain": null,
                        "role": "meth"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " for more information."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Replaces the docstring of the decorated object and then formats it."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Raises",
    "Notes",
    "Examples"
  ],
  "item_file": "/astropy/utils/decorators.py",
  "item_line": 870,
  "item_type": "<class 'function'>",
  "aliases": [
    "astropy.utils.format_doc"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Replacing the current docstring is very easy::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> from astropy.utils.decorators import format_doc",
            ">>> @format_doc('''Perform num1 + num2''')",
            "... def add(num1, num2):",
            "...     return num1+num2",
            "...",
            ">>> help(add) # doctest: +SKIP",
            "Help on function add in module __main__:",
            "<BLANKLINE>",
            "add(num1, num2)",
            "    Perform num1 + num2"
          ]
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "sometimes instead of replacing you only want to add to it::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> doc = '''",
            "...       {__doc__}",
            "...       Parameters",
            "...       ----------",
            "...       num1, num2 : Numbers",
            "...       Returns",
            "...       -------",
            "...       result: Number",
            "...       '''",
            ">>> @format_doc(doc)",
            "... def add(num1, num2):",
            "...     '''Perform addition.'''",
            "...     return num1+num2",
            "...",
            ">>> help(add) # doctest: +SKIP",
            "Help on function add in module __main__:",
            "<BLANKLINE>",
            "add(num1, num2)",
            "    Perform addition.",
            "    Parameters",
            "    ----------",
            "    num1, num2 : Numbers",
            "    Returns",
            "    -------",
            "    result : Number"
          ]
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "in case one might want to format it further::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> doc = '''",
            "...       Perform {0}.",
            "...       Parameters",
            "...       ----------",
            "...       num1, num2 : Numbers",
            "...       Returns",
            "...       -------",
            "...       result: Number",
            "...           result of num1 {op} num2",
            "...       {__doc__}",
            "...       '''",
            ">>> @format_doc(doc, 'addition', op='+')",
            "... def add(num1, num2):",
            "...     return num1+num2",
            "...",
            ">>> @format_doc(doc, 'subtraction', op='-')",
            "... def subtract(num1, num2):",
            "...     '''Notes: This one has additional notes.'''",
            "...     return num1-num2",
            "...",
            ">>> help(add) # doctest: +SKIP",
            "Help on function add in module __main__:",
            "<BLANKLINE>",
            "add(num1, num2)",
            "    Perform addition.",
            "    Parameters",
            "    ----------",
            "    num1, num2 : Numbers",
            "    Returns",
            "    -------",
            "    result : Number",
            "        result of num1 + num2",
            ">>> help(subtract) # doctest: +SKIP",
            "Help on function subtract in module __main__:",
            "<BLANKLINE>",
            "subtract(num1, num2)",
            "    Perform subtraction.",
            "    Parameters",
            "    ----------",
            "    num1, num2 : Numbers",
            "    Returns",
            "    -------",
            "    result : Number",
            "        result of num1 - num2",
            "    Notes : This one has additional notes."
          ]
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "These methods can be combined an even taking the docstring from another object is possible as docstring attribute. You just have to specify the object::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> @format_doc(add)",
            "... def another_add(num1, num2):",
            "...     return num1 + num2",
            "...",
            ">>> help(another_add) # doctest: +SKIP",
            "Help on function another_add in module __main__:",
            "<BLANKLINE>",
            "another_add(num1, num2)",
            "    Perform addition.",
            "    Parameters",
            "    ----------",
            "    num1, num2 : Numbers",
            "    Returns",
            "    -------",
            "    result : Number",
            "        result of num1 + num2"
          ]
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "But be aware that this decorator "
              }
            },
            {
              "type": "Emph",
              "data": {
                "value": {
                  "value": "only"
                }
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " formats the given docstring not the strings passed as "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "args"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " or "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "kwargs"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " (not even the original docstring)::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> @format_doc(doc, 'addition', op='+')",
            "... def yet_another_add(num1, num2):",
            "...    '''This one is good for {0}.'''",
            "...    return num1 + num2",
            "...",
            ">>> help(yet_another_add) # doctest: +SKIP",
            "Help on function yet_another_add in module __main__:",
            "<BLANKLINE>",
            "yet_another_add(num1, num2)",
            "    Perform addition.",
            "    Parameters",
            "    ----------",
            "    num1, num2 : Numbers",
            "    Returns",
            "    -------",
            "    result : Number",
            "        result of num1 + num2",
            "    This one is good for {0}."
          ]
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "To work around it you could specify the docstring to be "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "None"
                ]
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> @format_doc(None, 'addition')",
            "... def last_add_i_swear(num1, num2):",
            "...    '''This one is good for {0}.'''",
            "...    return num1 + num2",
            "...",
            ">>> help(last_add_i_swear) # doctest: +SKIP",
            "Help on function last_add_i_swear in module __main__:",
            "<BLANKLINE>",
            "last_add_i_swear(num1, num2)",
            "    This one is good for addition."
          ]
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "Using it with "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "None"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " as docstring allows to use the decorator twice on an object to first parse the new docstring and then to parse the original docstring or the "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "args"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " and "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "kwargs"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": "."
              }
            }
          ],
          "inner": []
        }
      }
    ],
    "title": null
  },
  "see_also": [],
  "version": "5.0",
  "signature": "format_doc(docstring, *args, **kwargs)",
  "references": null,
  "logo": "logo.png",
  "qa": "astropy.utils.decorators.format_doc",
  "arbitrary": []
}