{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "When using "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "sharedmethod",
                  "reference": {
                    "module": "astropy",
                    "version": "5.0",
                    "kind": "module",
                    "path": "astropy.utils.decorators.sharedmethod"
                  },
                  "kind": "module",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " on a method defined in a class's body, it may be called on an instance, or on a class.  In the former case it behaves like a normal instance method (a reference to the instance is automatically passed as the first "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "self"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " argument of the method)::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> class Example:",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "...     @sharedmethod",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "...     def identify(self, *args):",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "...         print('self was', self)",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": "...         print('additional args were', args)",
                  "_number": 4,
                  "_offset": 0
                },
                {
                  "_line": "...",
                  "_number": 5,
                  "_offset": 0
                },
                {
                  "_line": ">>> ex = Example()",
                  "_number": 6,
                  "_offset": 0
                },
                {
                  "_line": ">>> ex.identify(1, 2)",
                  "_number": 7,
                  "_offset": 0
                },
                {
                  "_line": "self was <astropy.utils.decorators.Example object at 0x...>",
                  "_number": 8,
                  "_offset": 0
                },
                {
                  "_line": "additional args were (1, 2)",
                  "_number": 9,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "In the latter case, when the "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "sharedmethod",
                  "reference": {
                    "module": "astropy",
                    "version": "5.0",
                    "kind": "module",
                    "path": "astropy.utils.decorators.sharedmethod"
                  },
                  "kind": "module",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is called directly from a class, it behaves like a "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "classmethod"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> Example.identify(3, 4)",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "self was <class 'astropy.utils.decorators.Example'>",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "additional args were (3, 4)",
                  "_number": 2,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This also supports a more advanced usage, where the "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "classmethod"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " implementation can be written separately.  If the class's "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "metaclass"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " has a method of the same name as the "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "sharedmethod",
                  "reference": {
                    "module": "astropy",
                    "version": "5.0",
                    "kind": "module",
                    "path": "astropy.utils.decorators.sharedmethod"
                  },
                  "kind": "module",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", the version on the metaclass is delegated to::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> class ExampleMeta(type):",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "...     def identify(self):",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "...         print('this implements the {0}.identify '",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "...               'classmethod'.format(self.__name__))",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": "...",
                  "_number": 4,
                  "_offset": 0
                },
                {
                  "_line": ">>> class Example(metaclass=ExampleMeta):",
                  "_number": 5,
                  "_offset": 0
                },
                {
                  "_line": "...     @sharedmethod",
                  "_number": 6,
                  "_offset": 0
                },
                {
                  "_line": "...     def identify(self):",
                  "_number": 7,
                  "_offset": 0
                },
                {
                  "_line": "...         print('this implements the instancemethod')",
                  "_number": 8,
                  "_offset": 0
                },
                {
                  "_line": "...",
                  "_number": 9,
                  "_offset": 0
                },
                {
                  "_line": ">>> Example().identify()",
                  "_number": 10,
                  "_offset": 0
                },
                {
                  "_line": "this implements the instancemethod",
                  "_number": 11,
                  "_offset": 0
                },
                {
                  "_line": ">>> Example.identify()",
                  "_number": 12,
                  "_offset": 0
                },
                {
                  "_line": "this implements the Example.identify classmethod",
                  "_number": 13,
                  "_offset": 0
                }
              ]
            }
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This is a method decorator that allows both an instancemethod and a "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "classmethod"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " to share the same name."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    {
      "module": "astropy",
      "version": "5.0",
      "kind": "module",
      "path": "astropy.utils.decorators.sharedmethod"
    }
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/astropy/utils/decorators.py",
  "item_line": 803,
  "item_type": "<class 'type'>",
  "aliases": [
    "astropy.utils.sharedmethod"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "5.0",
  "signature": null,
  "references": null,
  "logo": "logo.png",
  "qa": "astropy.utils.decorators.sharedmethod",
  "arbitrary": []
}