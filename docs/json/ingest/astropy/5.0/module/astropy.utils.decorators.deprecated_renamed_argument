{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The decorator assumes that the argument with the "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "old_name"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " was removed from the function signature and the "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "new_name"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " replaced it at the "
                }
              },
              {
                "type": "Strong",
                "data": {
                  "content": {
                    "value": "same position"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " in the signature.  If the "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "old_name"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " argument is given when calling the decorated function the decorator will catch it and issue a deprecation warning and pass it on as "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "new_name"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " argument."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The decorator should be applied to a function where the "
                }
              },
              {
                "type": "Strong",
                "data": {
                  "content": {
                    "value": "name"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " of an argument was changed but it applies the same logic."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Admonition",
          "data": {
            "kind": "warning",
            "title": "",
            "children": [
              {
                "inline": [
                  {
                    "type": "Words",
                    "data": {
                      "value": "If ``old_name`` is a list or tuple the ``new_name`` and ``since`` must also be a list or tuple with the same number of entries. ``relax`` and ``arg_in_kwarg`` can be a single bool ( applied to all) or also a list / tuple with the same number of entries like ``new_name``, etc. "
                    }
                  }
                ],
                "inner": []
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "old_name",
            "type_": "str or sequence of str",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The old name of the argument."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "new_name",
            "type_": "str or sequence of str or None",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The new name of the argument. Set this to "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "None"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " to remove the argument "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "old_name"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instead of renaming it."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "since",
            "type_": "str or number or sequence of str or number",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The release at which the old argument became deprecated."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "arg_in_kwargs",
            "type_": "bool or sequence of bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If the argument is not a named argument (for example it was meant to be consumed by "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "**kwargs"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ") set this to "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "True"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ".  Otherwise the decorator will throw an Exception if the "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "new_name"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " cannot be found in the signature of the decorated function. Default is "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "False"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "relax",
            "type_": "bool or sequence of bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "False"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " a "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "TypeError"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is raised if both "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "new_name"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "old_name"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are given.  If "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "True"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " the value for "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "new_name"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is used and a Warning is issued. Default is "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "False"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "pending",
            "type_": "bool or sequence of bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "True"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " this will hide the deprecation warning and ignore the corresponding "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "relax"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " parameter value. Default is "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "False"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "warning_type",
            "type_": "Warning",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Warning to be issued. Default is "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "~astropy.utils.exceptions.AstropyDeprecationWarning",
                        "reference": {
                          "module": "astropy",
                          "version": "5.0",
                          "kind": "module",
                          "path": "astropy.utils.exceptions.AstropyDeprecationWarning"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "alternative",
            "type_": "str, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "An alternative function or class name that the user may use in place of the deprecated object if "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "new_name"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is None. The deprecation warning will tell the user about this alternative if provided."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "message",
            "type_": "str, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A custom warning message. If provided then "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "since"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "alternative"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " options will have no effect."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "TypeError",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If the new argument name cannot be found in the function signature and arg_in_kwargs was False or if it is used to deprecate the name of the "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "*args"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "-, "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "**kwargs"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "-like arguments. At runtime such an Error is raised if both the new_name and old_name were specified when calling the function and \"relax=False\"."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Deprecate a _renamed_ or _removed_ function argument."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    {
      "module": "astropy",
      "version": "5.0",
      "kind": "module",
      "path": "astropy.utils.exceptions.AstropyDeprecationWarning"
    }
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Raises",
    "Notes",
    "Examples"
  ],
  "item_file": "/astropy/utils/decorators.py",
  "item_line": 281,
  "item_type": "<class 'function'>",
  "aliases": [
    "astropy.utils.deprecated_renamed_argument"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "The deprecation warnings are not shown in the following examples."
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "To deprecate a positional or keyword argument::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> from astropy.utils.decorators import deprecated_renamed_argument",
            ">>> @deprecated_renamed_argument('sig', 'sigma', '1.0')",
            "... def test(sigma):",
            "...     return sigma"
          ]
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> test(2)",
            "2",
            ">>> test(sigma=2)",
            "2",
            ">>> test(sig=2)  # doctest: +SKIP",
            "2"
          ]
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "To deprecate an argument caught inside the "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "**kwargs"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " the "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "arg_in_kwargs"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " has to be set::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> @deprecated_renamed_argument('sig', 'sigma', '1.0',",
            "...                             arg_in_kwargs=True)",
            "... def test(**kwargs):",
            "...     return kwargs['sigma']"
          ]
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> test(sigma=2)",
            "2",
            ">>> test(sig=2)  # doctest: +SKIP",
            "2"
          ]
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "By default providing the new and old keyword will lead to an Exception. If a Warning is desired set the "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "relax"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " argument::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> @deprecated_renamed_argument('sig', 'sigma', '1.0', relax=True)",
            "... def test(sigma):",
            "...     return sigma"
          ]
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> test(sig=2)  # doctest: +SKIP",
            "2"
          ]
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "It is also possible to replace multiple arguments. The "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "old_name"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": ", "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "new_name"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " and "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "since"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " have to be "
              }
            },
            {
              "type": "Directive",
              "data": {
                "value": [
                  "tuple"
                ],
                "domain": null,
                "role": null
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " or "
              }
            },
            {
              "type": "Directive",
              "data": {
                "value": [
                  "list"
                ],
                "domain": null,
                "role": null
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " and contain the same number of entries::"
              }
            }
          ],
          "inner": []
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> @deprecated_renamed_argument(['a', 'b'], ['alpha', 'beta'],",
            "...                              ['1.0', 1.2])",
            "... def test(alpha, beta):",
            "...     return alpha, beta"
          ]
        }
      },
      {
        "type": "BlockQuote",
        "data": {
          "value": [
            ">>> test(a=2, b=3)  # doctest: +SKIP",
            "(2, 3)"
          ]
        }
      },
      {
        "type": "Paragraph",
        "data": {
          "inline": [
            {
              "type": "Words",
              "data": {
                "value": "In this case "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "arg_in_kwargs"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " and "
              }
            },
            {
              "type": "Verbatim",
              "data": {
                "value": [
                  "relax"
                ]
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " can be a single value (which is applied to all renamed arguments) or must also be a "
              }
            },
            {
              "type": "Directive",
              "data": {
                "value": [
                  "tuple"
                ],
                "domain": null,
                "role": null
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " or "
              }
            },
            {
              "type": "Directive",
              "data": {
                "value": [
                  "list"
                ],
                "domain": null,
                "role": null
              }
            },
            {
              "type": "Words",
              "data": {
                "value": " with values for each of the arguments."
              }
            }
          ],
          "inner": []
        }
      }
    ],
    "title": null
  },
  "see_also": [],
  "version": "5.0",
  "signature": "deprecated_renamed_argument(old_name, new_name, since, arg_in_kwargs=False, relax=False, pending=False, warning_type=<class 'astropy.utils.exceptions.AstropyDeprecationWarning'>, alternative='', message='')",
  "references": null,
  "logo": "logo.png",
  "qa": "astropy.utils.decorators.deprecated_renamed_argument",
  "arbitrary": []
}