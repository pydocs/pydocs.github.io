{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Merge dicts of variables, while resolving conflicts appropriately."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "grouped",
            "type_": "mapping",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "prioritized",
            "type_": "mapping",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "compat",
            "type_": "str",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Type of equality check to use when checking for conflicts."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "Dict with keys taken by the union of keys on list_of_mappings,",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "and Variable values corresponding to those that should be found on the",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "merged result.",
            "desc": []
          }
        }
      ],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/xarray/core/merge.py",
  "item_line": 163,
  "item_type": "<class 'function'>",
  "aliases": [
    "xarray.core.merge.merge_collected"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "0.17.0",
  "signature": "merge_collected(grouped: Dict[Hashable, List[Tuple[xarray.core.variable.Variable, Union[pandas.core.indexes.base.Index, NoneType]]]], prioritized: Mapping[Hashable, Tuple[xarray.core.variable.Variable, Union[pandas.core.indexes.base.Index, NoneType]]] = None, compat: str = 'minimal') -> Tuple[Dict[Hashable, xarray.core.variable.Variable], Dict[Hashable, pandas.core.indexes.base.Index]]",
  "references": null,
  "logo": "logo.png",
  "qa": "xarray.core.merge.merge_collected",
  "arbitrary": []
}