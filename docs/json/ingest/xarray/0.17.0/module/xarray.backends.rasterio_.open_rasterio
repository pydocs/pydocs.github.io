{
  "_content": {
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Open a file with rasterio (experimental)."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This should work with any file that rasterio can open (most often: geoTIFF). The x and y coordinates are generated automatically from the file's geoinformation, shifted to the center of each pixel (see "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "\"PixelIsArea\"",
                    " ",
                    "Raster",
                    " ",
                    "Space",
                    " ",
                    "<http",
                    ":",
                    "//web.archive.org/web/20160326194152/http",
                    ":",
                    "//remotesensing.org/geotiff/spec/geotiff2.5.html#2.5.2>"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "_ for more information)."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "You can generate 2D coordinates from the file's attributes with::"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "    from affine import Affine",
                  "_number": 9,
                  "_offset": 4
                },
                {
                  "_line": "    da = xr.open_rasterio('path_to_file.tif')",
                  "_number": 10,
                  "_offset": 4
                },
                {
                  "_line": "    transform = Affine.from_gdal(*da.attrs['transform'])",
                  "_number": 11,
                  "_offset": 4
                },
                {
                  "_line": "    nx, ny = da.sizes['x'], da.sizes['y']",
                  "_number": 12,
                  "_offset": 4
                },
                {
                  "_line": "    x, y = np.meshgrid(np.arange(nx)+0.5, np.arange(ny)+0.5) * transform",
                  "_number": 13,
                  "_offset": 4
                }
              ]
            }
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "filename",
            "type_": "str, rasterio.DatasetReader, or rasterio.WarpedVRT",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Path to the file to open. Or already open rasterio dataset."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "parse_coordinates",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Whether to parse the x and y coordinates out of the file's "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "transform"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " attribute or not. The default is to automatically parse the coordinates only if they are rectilinear (1D). It can be useful to set "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "parse",
                          "_",
                          "coordinates=False"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " if your files are very large or if you don't need the coordinates."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "chunks",
            "type_": "int, tuple or dict, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Chunk sizes along each dimension, e.g., "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "5"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "(5,",
                          " ",
                          "5)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " or "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "{'x'",
                          ":",
                          " ",
                          "5,",
                          " ",
                          "'y'",
                          ":",
                          " ",
                          "5}"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". If chunks is provided, it used to load the new DataArray into a dask array."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "cache",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If True, cache data loaded from the underlying datastore in memory as NumPy arrays when accessed to avoid reading from the underlying data- store multiple times. Defaults to True unless you specify the "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "chunks",
                        "reference": {
                          "module": null,
                          "version": null,
                          "kind": "local",
                          "path": "chunks"
                        },
                        "kind": "local",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " argument to use dask, in which case it defaults to False."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "lock",
            "type_": "False, True or threading.Lock, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If chunks is provided, this argument is passed on to "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "dask.array.from_array",
                        "reference": {
                          "module": "dask",
                          "version": "2021.10.0",
                          "kind": "module",
                          "path": "dask.array.core.from_array"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". By default, a global lock is used to avoid issues with concurrent access to the same file when using dask's multithreaded backend."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "data",
            "type_": "DataArray",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The newly created DataArray."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Attributes": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    {
      "module": "dask",
      "version": "2021.10.0",
      "kind": "module",
      "path": "dask.array.core.from_array"
    }
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns"
  ],
  "item_file": "/Users/bussonniermatthias/miniconda3/lib/python3.8/site-packages/xarray/backends/rasterio_.py",
  "item_line": 165,
  "item_type": "<class 'function'>",
  "aliases": [
    "xarray.open_rasterio"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "0.17.0",
  "signature": "open_rasterio(filename, parse_coordinates=None, chunks=None, cache=None, lock=None)",
  "references": null,
  "logo": "logo.png",
  "qa": "xarray.backends.rasterio_.open_rasterio",
  "arbitrary": []
}