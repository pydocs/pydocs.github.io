{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Call signatures::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "legend()",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "legend(handles, labels)",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "legend(handles=handles)",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "legend(labels)",
                  "_number": 3,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The call signatures correspond to the following different ways to use this method:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Strong",
                "data": {
                  "content": {
                    "value": "1. Automatic detection of elements to be shown in the legend"
                  }
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The elements to be added to the legend are automatically determined, when you do not pass in any extra arguments."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "In this case, the labels are taken from the artist. You can specify them either at artist creation or by calling the "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "~.Artist.set_label",
                  "reference": {
                    "module": "matplotlib",
                    "version": "3.5.0",
                    "kind": "module",
                    "path": "matplotlib.artist.Artist.set_label"
                  },
                  "kind": "module",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " method on the artist::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "ax.plot([1, 2, 3], label='Inline label')",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "ax.legend()",
                  "_number": 1,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "or::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "line, = ax.plot([1, 2, 3])",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "line.set_label('Label via method')",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "ax.legend()",
                  "_number": 2,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Specific lines can be excluded from the automatic legend element selection by defining a label starting with an underscore. This is default for all artists, so calling "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": ".Axes.legend",
                  "reference": {
                    "module": "matplotlib",
                    "version": "3.5.0",
                    "kind": "module",
                    "path": "matplotlib.axes._axes.Axes.legend"
                  },
                  "kind": "module",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " without any arguments and without setting the labels manually will result in no legend being drawn."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Strong",
                "data": {
                  "content": {
                    "value": "2. Explicitly listing the artists and labels in the legend"
                  }
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "For full control of which artists have a legend entry, it is possible to pass an iterable of legend artists followed by an iterable of legend labels respectively::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "ax.legend([line1, line2, line3], ['label1', 'label2', 'label3'])",
                  "_number": 0,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Strong",
                "data": {
                  "content": {
                    "value": "3. Explicitly listing the artists in the legend"
                  }
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "This is similar to 2, but the labels are taken from the artists' label properties. Example::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "line1, = ax.plot([1, 2, 3], label='label1')",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "line2, = ax.plot([1, 2, 3], label='label2')",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "ax.legend(handles=[line1, line2])",
                  "_number": 2,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Strong",
                "data": {
                  "content": {
                    "value": "4. Labeling existing plot elements"
                  }
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockDirective",
          "data": {
            "directive_name": "admonition",
            "args0": [
              "Discouraged"
            ],
            "inner": {
              "inline": [
                {
                  "type": "Words",
                  "data": {
                    "value": "This call signature is discouraged, because the relation between plot elements and labels is only implicit by their order and can easily be mixed up. "
                  }
                }
              ],
              "inner": []
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "To make a legend for all artists on an Axes, call this function with an iterable of strings, one for each legend item. For example::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "ax.plot([1, 2, 3])",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "ax.plot([5, 6, 7])",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "ax.legend(['First line', 'Second line'])",
                  "_number": 2,
                  "_offset": 0
                }
              ]
            }
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Some artists are not supported by this function.  See "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    "/tutorials/intermediate/legend_guide"
                  ],
                  "domain": null,
                  "role": "doc"
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " for details."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "loc",
            "type_": "str or pair of floats, default: :rc:`legend.loc` ('best' for axes, 'upper right' for figures)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The location of the legend."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The strings "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'upper left', 'upper right', 'lower left', 'lower right'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " place the legend at the corresponding corner of the axes/figure."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The strings "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'upper center', 'lower center', 'center left', 'center right'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " place the legend at the center of the corresponding edge of the axes/figure."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The string "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'center'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " places the legend at the center of the axes/figure."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The string "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'best'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " places the legend at the location, among the nine locations defined so far, with the minimum overlap with other drawn artists.  This option can be quite slow for plots with large amounts of data; your plotting speed may benefit from providing a specific location."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The location can also be a 2-tuple giving the coordinates of the lower-left corner of the legend in axes coordinates (in which case "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "bbox_to_anchor"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " will be ignored)."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "For back-compatibility, "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'center right'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " (but no other location) can also be spelled "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'right'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", and each \"string\" locations can also be given as a numeric value:"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "BlockQuote",
                "data": {
                  "value": [
                    "===============   =============",
                    "Location String   Location Code",
                    "===============   =============",
                    "'best'            0",
                    "'upper right'     1",
                    "'upper left'      2",
                    "'lower left'      3",
                    "'lower right'     4",
                    "'right'           5",
                    "'center left'     6",
                    "'center right'    7",
                    "'lower center'    8",
                    "'upper center'    9",
                    "'center'          10",
                    "===============   ============="
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "bbox_to_anchor",
            "type_": "`.BboxBase`, 2-tuple, or 4-tuple of floats",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Box that is used to position the legend in conjunction with "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "loc"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". Defaults to "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "axes.bbox"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " (if called as a method to "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": ".Axes.legend",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.axes._axes.Axes.legend"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ") or "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "figure.bbox"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " (if "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".Figure.legend"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ").  This argument allows arbitrary placement of the legend."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Bbox coordinates are interpreted in the coordinate system given by "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "bbox_transform"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", with the default transform Axes or Figure coordinates, depending on which "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "legend"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is called."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If a 4-tuple or "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": ".BboxBase",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.transforms.BboxBase"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is given, then it specifies the bbox "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "(x, y, width, height)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " that the legend is placed in. To put the legend in the best location in the bottom right quadrant of the axes (or figure)::      "
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "BlockVerbatim",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": "loc='best', bbox_to_anchor=(0.5, 0., 0.5, 0.5)",
                        "_number": 0,
                        "_offset": 0
                      }
                    ]
                  }
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A 2-tuple "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "(x, y)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " places the corner of the legend specified by "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "loc"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " at x, y.  For example, to put the legend's upper right-hand corner in the center of the axes (or figure) the following keywords can be used::      "
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "BlockVerbatim",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": "loc='upper right', bbox_to_anchor=(0.5, 0.5)",
                        "_number": 0,
                        "_offset": 0
                      }
                    ]
                  }
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "ncol",
            "type_": "int, default: 1",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The number of columns that the legend has."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "prop",
            "type_": "None or `matplotlib.font_manager.FontProperties` or dict",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The font properties of the legend. If None (default), the current "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "matplotlib.rcParams"
                        ],
                        "domain": null,
                        "role": "data"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " will be used."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "fontsize",
            "type_": "int or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The font size of the legend. If the value is numeric the size will be the absolute font size in points. String values are relative to the current default font size. This argument is only used if "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "prop"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is not specified."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "labelcolor",
            "type_": "str or list, default: :rc:`legend.labelcolor`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The color of the text in the legend. Either a valid color string (for example, 'red'), or a list of color strings. The labelcolor can also be made to match the color of the line or marker using 'linecolor', 'markerfacecolor' (or 'mfc'), or 'markeredgecolor' (or 'mec')."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Labelcolor can be set globally using "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "legend.labelcolor"
                        ],
                        "domain": null,
                        "role": "rc"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". If None, use "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "text.color"
                        ],
                        "domain": null,
                        "role": "rc"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "numpoints",
            "type_": "int, default: :rc:`legend.numpoints`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The number of marker points in the legend when creating a legend entry for a "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": ".Line2D",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.lines.Line2D"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " (line)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "scatterpoints",
            "type_": "int, default: :rc:`legend.scatterpoints`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The number of marker points in the legend when creating a legend entry for a "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": ".PathCollection",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.collections.PathCollection"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " (scatter plot)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "scatteryoffsets",
            "type_": "iterable of floats, default: ``[0.375, 0.5, 0.3125]``",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The vertical offset (relative to the font size) for the markers created for a scatter plot legend entry. 0.0 is at the base the legend text, and 1.0 is at the top. To draw all markers at the same height, set to "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "[0.5]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "markerscale",
            "type_": "float, default: :rc:`legend.markerscale`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The relative size of legend markers compared with the originally drawn ones."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "markerfirst",
            "type_": "bool, default: True",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "True"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", legend marker is placed to the left of the legend label. If "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "False"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", legend marker is placed to the right of the legend label."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "frameon",
            "type_": "bool, default: :rc:`legend.frameon`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Whether the legend should be drawn on a patch (frame)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "fancybox",
            "type_": "bool, default: :rc:`legend.fancybox`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Whether round edges should be enabled around the "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": ".FancyBboxPatch",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.patches.FancyBboxPatch"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " which makes up the legend's background."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "shadow",
            "type_": "bool, default: :rc:`legend.shadow`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Whether to draw a shadow behind the legend."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "framealpha",
            "type_": "float, default: :rc:`legend.framealpha`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The alpha transparency of the legend's background. If "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "shadow"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is activated and "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "framealpha"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "None"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", the default value is ignored."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "facecolor",
            "type_": "\"inherit\" or color, default: :rc:`legend.facecolor`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The legend's background color. If "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "\"inherit\""
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", use "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "axes.facecolor"
                        ],
                        "domain": null,
                        "role": "rc"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "edgecolor",
            "type_": "\"inherit\" or color, default: :rc:`legend.edgecolor`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The legend's background patch edge color. If "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "\"inherit\""
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", use take "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "axes.edgecolor"
                        ],
                        "domain": null,
                        "role": "rc"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "mode",
            "type_": "{\"expand\", None}",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "mode"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is set to "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "\"expand\""
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " the legend will be horizontally expanded to fill the axes area (or "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "bbox_to_anchor"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " if defines the legend's size)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "bbox_transform",
            "type_": "None or `matplotlib.transforms.Transform`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The transform for the bounding box ("
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "bbox_to_anchor"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "). For a value of "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "None"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " (default) the Axes' "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "~matplotlib.axes.Axes.transAxes"
                        ],
                        "domain": null,
                        "role": "data"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " transform will be used."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "title",
            "type_": "str or None",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The legend's title. Default is no title ("
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "None"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ")."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "title_fontproperties",
            "type_": "None or `matplotlib.font_manager.FontProperties` or dict",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The font properties of the legend's title. If None (default), the "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "title_fontsize"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " argument will be used if present; if "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "title_fontsize"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is also None, the current "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "legend.title_fontsize"
                        ],
                        "domain": null,
                        "role": "rc"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " will be used."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "title_fontsize",
            "type_": "int or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}, default: :rc:`legend.title_fontsize`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The font size of the legend's title. Note: This cannot be combined with "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "title_fontproperties"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". If you want to set the fontsize alongside other font properties, use the "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "size"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " parameter in "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "title_fontproperties"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "borderpad",
            "type_": "float, default: :rc:`legend.borderpad`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The fractional whitespace inside the legend border, in font-size units."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "labelspacing",
            "type_": "float, default: :rc:`legend.labelspacing`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The vertical space between the legend entries, in font-size units."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "handlelength",
            "type_": "float, default: :rc:`legend.handlelength`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The length of the legend handles, in font-size units."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "handleheight",
            "type_": "float, default: :rc:`legend.handleheight`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The height of the legend handles, in font-size units."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "handletextpad",
            "type_": "float, default: :rc:`legend.handletextpad`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The pad between the legend handle and text, in font-size units."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "borderaxespad",
            "type_": "float, default: :rc:`legend.borderaxespad`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The pad between the axes and legend border, in font-size units."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "columnspacing",
            "type_": "float, default: :rc:`legend.columnspacing`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The spacing between columns, in font-size units."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "handler_map",
            "type_": "dict or None",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The custom dictionary mapping instances or types to a legend handler. This "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "handler_map"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " updates the default handler map found at "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "matplotlib.legend.Legend.get_legend_handler_map",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.legend.Legend.get_legend_handler_map"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "handles",
            "type_": "sequence of `.Artist`, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A list of Artists (lines, patches) to be added to the legend. Use this together with "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "labels"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", if you need full control on what is shown in the legend and the automatic mechanism described above is not sufficient."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The length of handles and labels should be the same in this case. If they are not, they are truncated to the smaller length."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "labels",
            "type_": "list of str, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A list of labels to show next to the artists. Use this together with "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "handles"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", if you need full control on what is shown in the legend and the automatic mechanism described above is not sufficient."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "`~matplotlib.legend.Legend`",
            "desc": []
          }
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Place a legend on the Axes."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    {
      "module": "matplotlib",
      "version": "3.5.0",
      "kind": "module",
      "path": "matplotlib.legend.Legend.get_legend_handler_map"
    },
    {
      "module": "matplotlib",
      "version": "3.5.0",
      "kind": "module",
      "path": "matplotlib.axes._axes.Axes.legend"
    },
    {
      "module": "matplotlib",
      "version": "3.5.0",
      "kind": "module",
      "path": "matplotlib.patches.FancyBboxPatch"
    },
    {
      "module": "matplotlib",
      "version": "3.5.0",
      "kind": "module",
      "path": "matplotlib.transforms.BboxBase"
    },
    {
      "module": "matplotlib",
      "version": "3.5.0",
      "kind": "module",
      "path": "matplotlib.artist.Artist.set_label"
    },
    {
      "module": "matplotlib",
      "version": "3.5.0",
      "kind": "module",
      "path": "matplotlib.collections.PathCollection"
    },
    {
      "module": "matplotlib",
      "version": "3.5.0",
      "kind": "module",
      "path": "matplotlib.lines.Line2D"
    }
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Other Parameters",
    "See Also",
    "Notes",
    "Examples"
  ],
  "item_file": "/matplotlib/axes/_axes.py",
  "item_line": 186,
  "item_type": "<class 'function'>",
  "aliases": [
    "matplotlib.pyplot.Axes.legend"
  ],
  "example_section_data": {
    "children": [
      {
        "type": "BlockDirective",
        "data": {
          "directive_name": "plot",
          "args0": [],
          "inner": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "gallery / text_labels_and_annotations / legend.py "
                }
              }
            ],
            "inner": []
          }
        }
      }
    ],
    "title": null
  },
  "see_also": [
    {
      "name": {
        "name": ".Figure.legend",
        "ref": null,
        "exists": null
      },
      "descriptions": [],
      "type": null
    }
  ],
  "version": "3.5.0",
  "signature": "legend(self, *args, **kwargs)",
  "references": null,
  "logo": "logo.png",
  "qa": "matplotlib.axes._axes.Axes.legend",
  "arbitrary": []
}