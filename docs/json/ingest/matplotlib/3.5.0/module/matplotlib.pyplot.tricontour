{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The triangulation can be specified in one of two ways; either ::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "tricontour(triangulation, ...)",
                  "_number": 0,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "where "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "triangulation"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is a "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    ".Triangulation"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " object, or ::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "tricontour(x, y, ...)",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "tricontour(x, y, triangles, ...)",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "tricontour(x, y, triangles=triangles, ...)",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "tricontour(x, y, mask=mask, ...)",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": "tricontour(x, y, triangles, mask=mask, ...)",
                  "_number": 4,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "in which case a "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    ".Triangulation"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " object will be created.  See that class' docstring for an explanation of these cases."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The remaining arguments may be::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "tricontour(..., Z)",
                  "_number": 0,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "where "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "Z"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is the array of values to contour, one per point in the triangulation.  The level values are chosen automatically."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "tricontour(..., Z, levels)",
                  "_number": 4,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "contour up to "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "levels+1"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " automatically chosen contour levels ("
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "levels"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " intervals)."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "tricontour(..., Z, levels)",
                  "_number": 4,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "draw contour lines at the values specified in sequence "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "levels"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", which must be in increasing order."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "tricontour(Z, **kwargs)",
                  "_number": 4,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Use keyword arguments to control colors, linewidth, origin, cmap ... see below for more details."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "colors",
            "type_": "color string or sequence of colors, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The colors of the levels, i.e., the contour lines."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The sequence is cycled for the levels in ascending order. If the sequence is shorter than the number of levels, it's repeated."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "As a shortcut, single color strings may be used in place of one-element lists, i.e. "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'red'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instead of "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "['red']"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " to color all levels with the same color. This shortcut does only work for color strings, not for other ways of specifying colors."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "By default (value "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "None"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "), the colormap specified by "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "cmap"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " will be used."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "alpha",
            "type_": "float, default: 1",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The alpha blending value, between 0 (transparent) and 1 (opaque)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "cmap",
            "type_": "str or `.Colormap`, default: :rc:`image.cmap`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": ".Colormap",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.colors.Colormap"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instance or registered colormap name. The colormap maps the level values to colors."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If both "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "colors"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "cmap"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are given, an error is raised."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "norm",
            "type_": "`~matplotlib.colors.Normalize`, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If a colormap is used, the "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": ".Normalize",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.colors.Normalize"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instance scales the level values to the canonical colormap range [0, 1] for mapping to colors. If not given, the default linear scaling is used."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "vmin, vmax",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If not "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "None"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", either or both of these values will be supplied to the "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": ".Normalize",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.colors.Normalize"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instance, overriding the default color scaling based on "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "levels"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "origin",
            "type_": "{*None*, 'upper', 'lower', 'image'}, default: None",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Determines the orientation and exact position of "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "Z"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " by specifying the position of "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "Z[0, 0]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ".  This is only relevant, if "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "X"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "Y"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are not given."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "BulletList",
                "data": {
                  "value": [
                    {
                      "type": "Paragraph",
                      "data": {
                        "inline": [
                          {
                            "type": "Emph",
                            "data": {
                              "value": {
                                "value": "None"
                              }
                            }
                          },
                          {
                            "type": "Words",
                            "data": {
                              "value": ": "
                            }
                          },
                          {
                            "type": "Verbatim",
                            "data": {
                              "value": [
                                "Z[0, 0]"
                              ]
                            }
                          },
                          {
                            "type": "Words",
                            "data": {
                              "value": " is at X=0, Y=0 in the lower left corner."
                            }
                          }
                        ],
                        "inner": []
                      }
                    },
                    {
                      "type": "Paragraph",
                      "data": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "'lower': "
                            }
                          },
                          {
                            "type": "Verbatim",
                            "data": {
                              "value": [
                                "Z[0, 0]"
                              ]
                            }
                          },
                          {
                            "type": "Words",
                            "data": {
                              "value": " is at X=0.5, Y=0.5 in the lower left corner."
                            }
                          }
                        ],
                        "inner": []
                      }
                    },
                    {
                      "type": "Paragraph",
                      "data": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "'upper': "
                            }
                          },
                          {
                            "type": "Verbatim",
                            "data": {
                              "value": [
                                "Z[0, 0]"
                              ]
                            }
                          },
                          {
                            "type": "Words",
                            "data": {
                              "value": " is at X=N+0.5, Y=0.5 in the upper left corner."
                            }
                          }
                        ],
                        "inner": []
                      }
                    },
                    {
                      "type": "Paragraph",
                      "data": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "'image': Use the value from "
                            }
                          },
                          {
                            "type": "Directive",
                            "data": {
                              "value": [
                                "image.origin"
                              ],
                              "domain": null,
                              "role": "rc"
                            }
                          },
                          {
                            "type": "Words",
                            "data": {
                              "value": "."
                            }
                          }
                        ],
                        "inner": []
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "extent",
            "type_": "(x0, x1, y0, y1), optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "origin"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is not "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "None"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", then "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "extent"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is interpreted as in "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".imshow"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ": it gives the outer pixel boundaries. In this case, the position of Z[0, 0] is the center of the pixel, not a corner. If "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "origin"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "None"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", then ("
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "x0"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "y0"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ") is the position of Z[0, 0], and ("
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "x1"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "y1"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ") is the position of Z[-1, -1]."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "This argument is ignored if "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "X"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "Y"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are specified in the call to contour."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "locator",
            "type_": "ticker.Locator subclass, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The locator is used to determine the contour levels if they are not given explicitly via "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "levels"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". Defaults to "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "~.ticker.MaxNLocator",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.ticker.MaxNLocator"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "extend",
            "type_": "{'neither', 'both', 'min', 'max'}, default: 'neither'",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Determines the "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "tricontour"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "-coloring of values that are outside the "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "levels"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " range."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If 'neither', values outside the "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "levels"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " range are not colored.  If 'min', 'max' or 'both', color the values below, above or below and above the "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "levels"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " range."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Values below "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "min(levels)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and above "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "max(levels)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are mapped to the under/over values of the "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": ".Colormap",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.colors.Colormap"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". Note that most colormaps do not have dedicated colors for these by default, so that the over and under values are the edge values of the colormap.  You may want to set these values explicitly using "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": ".Colormap.set_under",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.colors.Colormap.set_under"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": ".Colormap.set_over",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.colors.Colormap.set_over"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Admonition",
                "data": {
                  "kind": "note",
                  "title": "",
                  "children": [
                    {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "An existing `.TriContourSet` does not get notified if properties of its colormap are changed. Therefore, an explicit call to `.ContourSet.changed ( )` is needed after modifying the colormap. The explicit call can be left out, if a colorbar is assigned to the `.TriContourSet` because it internally calls `.ContourSet.changed ( )`. "
                          }
                        }
                      ],
                      "inner": []
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "xunits, yunits",
            "type_": "registered units, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Override axis units by specifying an instance of a "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "matplotlib.units.ConversionInterface",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.units.ConversionInterface"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "antialiased",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Enable antialiasing, overriding the defaults.  For filled contours, the default is "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "True"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ".  For line contours, it is taken from "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "lines.antialiased"
                        ],
                        "domain": null,
                        "role": "rc"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "linewidths",
            "type_": "float or array-like, default: :rc:`contour.linewidth`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The line width of the contour lines."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If a number, all levels will be plotted with this linewidth."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If a sequence, the levels in ascending order will be plotted with the linewidths in the order specified."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If None, this falls back to "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "lines.linewidth"
                        ],
                        "domain": null,
                        "role": "rc"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "linestyles",
            "type_": "{*None*, 'solid', 'dashed', 'dashdot', 'dotted'}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "linestyles"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "None"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", the default is 'solid' unless the lines are monochrome.  In that case, negative contours will take their linestyle from "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "contour.negative_linestyle"
                        ],
                        "domain": null,
                        "role": "rc"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " setting."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "linestyles"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " can also be an iterable of the above strings specifying a set of linestyles to be used. If this iterable is shorter than the number of contour levels it will be repeated as necessary."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "triangulation",
            "type_": "`.Triangulation`, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The unstructured triangular grid."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If specified, then "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "x"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "y"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "triangles"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", and "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "mask"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are not accepted."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "x, y",
            "type_": "array-like, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The coordinates of the values in "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "Z"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "triangles",
            "type_": "(ntri, 3) array-like of int, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "For each triangle, the indices of the three points that make up the triangle, ordered in an anticlockwise manner.  If not specified, the Delaunay triangulation is calculated."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "mask",
            "type_": "(ntri,) array-like of bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Which triangles are masked out."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "Z",
            "type_": "2D array-like",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The height values over which the contour is drawn."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "levels",
            "type_": "int or array-like, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Determines the number and positions of the contour lines / regions."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If an int "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "n"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", use "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "~matplotlib.ticker.MaxNLocator",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.ticker.MaxNLocator"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", which tries to automatically choose no more than "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "n+1"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " \"nice\" contour levels between "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "vmin"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "vmax"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If array-like, draw contour lines at the specified levels.  The values must be in increasing order."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "`~matplotlib.tri.TriContourSet`",
            "desc": []
          }
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Draw contour lines on an unstructured triangular grid."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    {
      "module": "matplotlib",
      "version": "3.5.0",
      "kind": "module",
      "path": "matplotlib.colors.Normalize"
    },
    {
      "module": "matplotlib",
      "version": "3.5.0",
      "kind": "module",
      "path": "matplotlib.colors.Colormap.set_over"
    },
    {
      "module": "matplotlib",
      "version": "3.5.0",
      "kind": "module",
      "path": "matplotlib.units.ConversionInterface"
    },
    {
      "module": "matplotlib",
      "version": "3.5.0",
      "kind": "module",
      "path": "matplotlib.colors.Colormap"
    },
    {
      "module": "matplotlib",
      "version": "3.5.0",
      "kind": "module",
      "path": "matplotlib.ticker.MaxNLocator"
    },
    {
      "module": "matplotlib",
      "version": "3.5.0",
      "kind": "module",
      "path": "matplotlib.colors.Colormap.set_under"
    }
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Other Parameters"
  ],
  "item_file": "/matplotlib/pyplot.py",
  "item_line": 2948,
  "item_type": "<class 'function'>",
  "aliases": [
    "matplotlib.pyplot.tricontour"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "3.5.0",
  "signature": "tricontour(*args, **kwargs)",
  "references": null,
  "logo": "logo.png",
  "qa": "matplotlib.pyplot.tricontour",
  "arbitrary": []
}