{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Call signature::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "contourf([X, Y,] Z, [levels], **kwargs)",
                  "_number": 0,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Directive",
                "data": {
                  "value": [
                    ".contour"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Directive",
                "data": {
                  "value": [
                    ".contourf"
                  ],
                  "domain": null,
                  "role": null
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " draw contour lines and filled contours, respectively.  Except as noted, function signatures and return values are the same for both versions."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "EnumeratedList",
          "data": {
            "value": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".contourf"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " differs from the MATLAB version in that it does not draw    the polygon edges. To draw edges, add line contours with calls to    "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".contour"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "EnumeratedList",
          "data": {
            "value": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".contourf"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " fills intervals that are closed at the top; that is, for    boundaries "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "z1"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "z2"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", the filled region is::        "
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "BlockVerbatim",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": "z1 < Z <= z2",
                        "_number": 0,
                        "_offset": 0
                      }
                    ]
                  }
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "except for the lowest interval, which is closed on both sides (i.e.    it includes the lowest value)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "EnumeratedList",
          "data": {
            "value": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".contour"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".contourf"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " use a "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "marching squares\n   <https://en.wikipedia.org/wiki/Marching_squares>"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " algorithm to    compute contour locations.  More information can be found in    the source "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "src/_contour.h"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "corner_mask",
            "type_": "bool, default: :rc:`contour.corner_mask`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Enable/disable corner masking, which only has an effect if "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "Z"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is a masked array.  If "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "False"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", any quad touching a masked point is masked out.  If "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "True"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", only the triangular corners of quads nearest those points are always masked out, other triangular corners comprising three unmasked points are contoured as usual."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "colors",
            "type_": "color string or sequence of colors, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The colors of the levels, i.e. the lines for "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".contour"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and the areas for "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".contourf"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The sequence is cycled for the levels in ascending order. If the sequence is shorter than the number of levels, it's repeated."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "As a shortcut, single color strings may be used in place of one-element lists, i.e. "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "'red'"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instead of "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "['red']"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " to color all levels with the same color. This shortcut does only work for color strings, not for other ways of specifying colors."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "By default (value "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "None"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "), the colormap specified by "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "cmap"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " will be used."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "alpha",
            "type_": "float, default: 1",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The alpha blending value, between 0 (transparent) and 1 (opaque)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "cmap",
            "type_": "str or `.Colormap`, default: :rc:`image.cmap`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": ".Colormap",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.colors.Colormap"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instance or registered colormap name. The colormap maps the level values to colors."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If both "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "colors"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "cmap"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are given, an error is raised."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "norm",
            "type_": "`~matplotlib.colors.Normalize`, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If a colormap is used, the "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": ".Normalize",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.colors.Normalize"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instance scales the level values to the canonical colormap range [0, 1] for mapping to colors. If not given, the default linear scaling is used."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "vmin, vmax",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If not "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "None"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", either or both of these values will be supplied to the "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": ".Normalize",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.colors.Normalize"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " instance, overriding the default color scaling based on "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "levels"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "origin",
            "type_": "{*None*, 'upper', 'lower', 'image'}, default: None",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Determines the orientation and exact position of "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "Z"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " by specifying the position of "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "Z[0, 0]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ".  This is only relevant, if "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "X"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "Y"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are not given."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "BulletList",
                "data": {
                  "value": [
                    {
                      "type": "Paragraph",
                      "data": {
                        "inline": [
                          {
                            "type": "Emph",
                            "data": {
                              "value": {
                                "value": "None"
                              }
                            }
                          },
                          {
                            "type": "Words",
                            "data": {
                              "value": ": "
                            }
                          },
                          {
                            "type": "Verbatim",
                            "data": {
                              "value": [
                                "Z[0, 0]"
                              ]
                            }
                          },
                          {
                            "type": "Words",
                            "data": {
                              "value": " is at X=0, Y=0 in the lower left corner."
                            }
                          }
                        ],
                        "inner": []
                      }
                    },
                    {
                      "type": "Paragraph",
                      "data": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "'lower': "
                            }
                          },
                          {
                            "type": "Verbatim",
                            "data": {
                              "value": [
                                "Z[0, 0]"
                              ]
                            }
                          },
                          {
                            "type": "Words",
                            "data": {
                              "value": " is at X=0.5, Y=0.5 in the lower left corner."
                            }
                          }
                        ],
                        "inner": []
                      }
                    },
                    {
                      "type": "Paragraph",
                      "data": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "'upper': "
                            }
                          },
                          {
                            "type": "Verbatim",
                            "data": {
                              "value": [
                                "Z[0, 0]"
                              ]
                            }
                          },
                          {
                            "type": "Words",
                            "data": {
                              "value": " is at X=N+0.5, Y=0.5 in the upper left   corner."
                            }
                          }
                        ],
                        "inner": []
                      }
                    },
                    {
                      "type": "Paragraph",
                      "data": {
                        "inline": [
                          {
                            "type": "Words",
                            "data": {
                              "value": "'image': Use the value from "
                            }
                          },
                          {
                            "type": "Directive",
                            "data": {
                              "value": [
                                "image.origin"
                              ],
                              "domain": null,
                              "role": "rc"
                            }
                          },
                          {
                            "type": "Words",
                            "data": {
                              "value": "."
                            }
                          }
                        ],
                        "inner": []
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "extent",
            "type_": "(x0, x1, y0, y1), optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "origin"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is not "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "None"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", then "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "extent"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is interpreted as in "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".imshow"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ": it gives the outer pixel boundaries. In this case, the position of Z[0, 0] is the center of the pixel, not a corner. If "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "origin"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "None"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", then ("
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "x0"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "y0"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ") is the position of Z[0, 0], and ("
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "x1"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "y1"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ") is the position of Z[-1, -1]."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "This argument is ignored if "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "X"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "Y"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are specified in the call to contour."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "locator",
            "type_": "ticker.Locator subclass, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The locator is used to determine the contour levels if they are not given explicitly via "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "levels"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". Defaults to "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "~.ticker.MaxNLocator",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.ticker.MaxNLocator"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "extend",
            "type_": "{'neither', 'both', 'min', 'max'}, default: 'neither'",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Determines the "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "contourf"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "-coloring of values that are outside the "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "levels"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " range."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If 'neither', values outside the "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "levels"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " range are not colored. If 'min', 'max' or 'both', color the values below, above or below and above the "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "levels"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " range."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Values below "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "min(levels)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and above "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "max(levels)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " are mapped to the under/over values of the "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": ".Colormap",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.colors.Colormap"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". Note that most colormaps do not have dedicated colors for these by default, so that the over and under values are the edge values of the colormap. You may want to set these values explicitly using "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": ".Colormap.set_under",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.colors.Colormap.set_under"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": ".Colormap.set_over",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.colors.Colormap.set_over"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Admonition",
                "data": {
                  "kind": "note",
                  "title": "",
                  "children": [
                    {
                      "inline": [
                        {
                          "type": "Words",
                          "data": {
                            "value": "An existing `.QuadContourSet` does not get notified if properties of its colormap are changed. Therefore, an explicit call `.QuadContourSet.changed ( )` is needed after modifying the colormap. The explicit call can be left out, if a colorbar is assigned to the `.QuadContourSet` because it internally calls `.QuadContourSet.changed ( )`. "
                          }
                        }
                      ],
                      "inner": []
                    }
                  ]
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Example::      "
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "BlockVerbatim",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": "x = np.arange(1, 10)",
                        "_number": 0,
                        "_offset": 0
                      },
                      {
                        "_line": "y = x.reshape(-1, 1)",
                        "_number": 1,
                        "_offset": 0
                      },
                      {
                        "_line": "h = x * y",
                        "_number": 2,
                        "_offset": 0
                      },
                      {
                        "_line": "",
                        "_number": 3,
                        "_offset": 0
                      },
                      {
                        "_line": "cs = plt.contourf(h, levels=[10, 30, 50],",
                        "_number": 4,
                        "_offset": 0
                      },
                      {
                        "_line": "    colors=['#808080', '#A0A0A0', '#C0C0C0'], extend='both')",
                        "_number": 5,
                        "_offset": 0
                      },
                      {
                        "_line": "cs.cmap.set_over('red')",
                        "_number": 6,
                        "_offset": 0
                      },
                      {
                        "_line": "cs.cmap.set_under('blue')",
                        "_number": 7,
                        "_offset": 0
                      },
                      {
                        "_line": "cs.changed()",
                        "_number": 8,
                        "_offset": 0
                      }
                    ]
                  }
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "xunits, yunits",
            "type_": "registered units, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Override axis units by specifying an instance of a "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "matplotlib.units.ConversionInterface",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.units.ConversionInterface"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "antialiased",
            "type_": "bool, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Enable antialiasing, overriding the defaults.  For filled contours, the default is "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "True"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ".  For line contours, it is taken from "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "lines.antialiased"
                        ],
                        "domain": null,
                        "role": "rc"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "nchunk",
            "type_": "int >= 0, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If 0, no subdivision of the domain.  Specify a positive integer to divide the domain into subdomains of "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "nchunk"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " by "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "nchunk"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " quads. Chunking reduces the maximum length of polygons generated by the contouring algorithm which reduces the rendering workload passed on to the backend and also requires slightly less RAM.  It can however introduce rendering artifacts at chunk boundaries depending on the backend, the "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "antialiased"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " flag and value of "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "alpha"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "linewidths",
            "type_": "float or array-like, default: :rc:`contour.linewidth`",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "Only applies to"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".contour"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The line width of the contour lines."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If a number, all levels will be plotted with this linewidth."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If a sequence, the levels in ascending order will be plotted with the linewidths in the order specified."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If None, this falls back to "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "lines.linewidth"
                        ],
                        "domain": null,
                        "role": "rc"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "linestyles",
            "type_": "{*None*, 'solid', 'dashed', 'dashdot', 'dotted'}, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "Only applies to"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".contour"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "linestyles"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "None"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", the default is 'solid' unless the lines are monochrome.  In that case, negative contours will take their linestyle from "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          "contour.negative_linestyle"
                        ],
                        "domain": null,
                        "role": "rc"
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " setting."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "linestyles"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " can also be an iterable of the above strings specifying a set of linestyles to be used. If this iterable is shorter than the number of contour levels it will be repeated as necessary."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "hatches",
            "type_": "list[str], optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "Only applies to"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " "
                      }
                    },
                    {
                      "type": "Directive",
                      "data": {
                        "value": [
                          ".contourf"
                        ],
                        "domain": null,
                        "role": null
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A list of cross hatch patterns to use on the filled areas. If None, no hatching will be added to the contour. Hatching is supported in the PostScript, PDF, SVG and Agg backends only."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "data",
            "type_": "indexable object, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If given, all parameters also accept a string "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "s"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", which is interpreted as "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "data[s]"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " (unless this raises an exception)."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "X, Y",
            "type_": "array-like, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The coordinates of the values in "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "Z"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "X"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "Y"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " must both be 2D with the same shape as "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "Z"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " (e.g. created via "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "numpy.meshgrid",
                        "reference": {
                          "module": "numpy",
                          "version": "1.21.3",
                          "kind": "module",
                          "path": "numpy.meshgrid"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "), or they must both be 1-D such that "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "len(X) == N"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is the number of columns in "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "Z"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "len(Y) == M"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " is the number of rows in "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "Z"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "X"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "Y"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " must both be ordered monotonically."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If not given, they are assumed to be integer indices, i.e. "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "X = range(N)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "Y = range(M)"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "Z",
            "type_": "(M, N) array-like",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The height values over which the contour is drawn."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "levels",
            "type_": "int or array-like, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Determines the number and positions of the contour lines / regions."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If an int "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "n"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", use "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": "~matplotlib.ticker.MaxNLocator",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.ticker.MaxNLocator"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ", which tries to automatically choose no more than "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "n+1"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " \"nice\" contour levels between "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "vmin"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " and "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "vmax"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": "."
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "If array-like, draw contour lines at the specified levels. The values must be in increasing order."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "`~.contour.QuadContourSet`",
            "desc": []
          }
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Plot filled contours."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    {
      "module": "matplotlib",
      "version": "3.5.0",
      "kind": "module",
      "path": "matplotlib.colors.Normalize"
    },
    {
      "module": "matplotlib",
      "version": "3.5.0",
      "kind": "module",
      "path": "matplotlib.colors.Colormap.set_over"
    },
    {
      "module": "matplotlib",
      "version": "3.5.0",
      "kind": "module",
      "path": "matplotlib.units.ConversionInterface"
    },
    {
      "module": "matplotlib",
      "version": "3.5.0",
      "kind": "module",
      "path": "matplotlib.colors.Colormap"
    },
    {
      "module": "matplotlib",
      "version": "3.5.0",
      "kind": "module",
      "path": "matplotlib.ticker.MaxNLocator"
    },
    {
      "module": "numpy",
      "version": "1.21.3",
      "kind": "module",
      "path": "numpy.meshgrid"
    },
    {
      "module": "matplotlib",
      "version": "3.5.0",
      "kind": "module",
      "path": "matplotlib.colors.Colormap.set_under"
    }
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns",
    "Other Parameters",
    "Notes"
  ],
  "item_file": "/matplotlib/axes/_axes.py",
  "item_line": 6259,
  "item_type": "<class 'function'>",
  "aliases": [
    "matplotlib.pyplot.Axes.contourf"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "3.5.0",
  "signature": "contourf(self, *args, data=None, **kwargs)",
  "references": null,
  "logo": "logo.png",
  "qa": "matplotlib.axes._axes.Axes.contourf",
  "arbitrary": []
}