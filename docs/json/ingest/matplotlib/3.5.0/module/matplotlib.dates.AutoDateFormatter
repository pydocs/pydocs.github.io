{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Link",
                "data": {
                  "value": ".AutoDateFormatter",
                  "reference": {
                    "module": "matplotlib",
                    "version": "3.5.0",
                    "kind": "module",
                    "path": "matplotlib.dates.AutoDateFormatter"
                  },
                  "kind": "module",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " has a "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    ".scale"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " dictionary that maps tick scales (the interval in days between one major tick) to format strings; this dictionary defaults to ::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "self.scaled = {",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "    DAYS_PER_YEAR: rcParams['date.autoformat.year'],",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "    DAYS_PER_MONTH: rcParams['date.autoformat.month'],",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "    1: rcParams['date.autoformat.day'],",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": "    1 / HOURS_PER_DAY: rcParams['date.autoformat.hour'],",
                  "_number": 4,
                  "_offset": 0
                },
                {
                  "_line": "    1 / MINUTES_PER_DAY: rcParams['date.autoformat.minute'],",
                  "_number": 5,
                  "_offset": 0
                },
                {
                  "_line": "    1 / SEC_PER_DAY: rcParams['date.autoformat.second'],",
                  "_number": 6,
                  "_offset": 0
                },
                {
                  "_line": "    1 / MUSECONDS_PER_DAY: rcParams['date.autoformat.microsecond'],",
                  "_number": 7,
                  "_offset": 0
                },
                {
                  "_line": "}",
                  "_number": 8,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The formatter uses the format string corresponding to the lowest key in the dictionary that is greater or equal to the current scale.  Dictionary entries can be customized::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "locator = AutoDateLocator()",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "formatter = AutoDateFormatter(locator)",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "formatter.scaled[1/(24*60)] = '%M:%S' # only show min and sec",
                  "_number": 2,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Custom callables can also be used instead of format strings.  The following example shows how to use a custom format function to strip trailing zeros from decimal seconds and adds the date to the first ticklabel::      "
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": "def my_format_function(x, pos=None):",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": "    x = matplotlib.dates.num2date(x)",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": "    if pos == 0:",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "        fmt = '%D %H:%M:%S.%f'",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": "    else:",
                  "_number": 4,
                  "_offset": 0
                },
                {
                  "_line": "        fmt = '%H:%M:%S.%f'",
                  "_number": 5,
                  "_offset": 0
                },
                {
                  "_line": "    label = x.strftime(fmt)",
                  "_number": 6,
                  "_offset": 0
                },
                {
                  "_line": "    label = label.rstrip(\"0\")",
                  "_number": 7,
                  "_offset": 0
                },
                {
                  "_line": "    label = label.rstrip(\".\")",
                  "_number": 8,
                  "_offset": 0
                },
                {
                  "_line": "    return label",
                  "_number": 9,
                  "_offset": 0
                },
                {
                  "_line": "",
                  "_number": 10,
                  "_offset": 0
                },
                {
                  "_line": "formatter.scaled[1/(24*60)] = my_format_function",
                  "_number": 11,
                  "_offset": 0
                }
              ]
            }
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "A "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": ".Formatter",
                  "reference": {
                    "module": "matplotlib",
                    "version": "3.5.0",
                    "kind": "module",
                    "path": "matplotlib.ticker.Formatter"
                  },
                  "kind": "module",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " which attempts to figure out the best format to use.  This is most useful when used with the "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "AutoDateLocator",
                  "reference": {
                    "module": "matplotlib",
                    "version": "3.5.0",
                    "kind": "module",
                    "path": "matplotlib.dates.AutoDateLocator"
                  },
                  "kind": "module",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    {
      "module": "matplotlib",
      "version": "3.5.0",
      "kind": "module",
      "path": "matplotlib.dates.AutoDateFormatter"
    },
    {
      "module": "matplotlib",
      "version": "3.5.0",
      "kind": "module",
      "path": "matplotlib.dates.AutoDateLocator"
    },
    {
      "module": "matplotlib",
      "version": "3.5.0",
      "kind": "module",
      "path": "matplotlib.ticker.Formatter"
    }
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/matplotlib/dates.py",
  "item_line": 860,
  "item_type": "<class 'type'>",
  "aliases": [
    "matplotlib.dates.AutoDateFormatter"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "3.5.0",
  "signature": "AutoDateFormatter(locator, tz=None, defaultfmt='%Y-%m-%d', *, usetex=None)",
  "references": null,
  "logo": "logo.png",
  "qa": "matplotlib.dates.AutoDateFormatter",
  "arbitrary": []
}