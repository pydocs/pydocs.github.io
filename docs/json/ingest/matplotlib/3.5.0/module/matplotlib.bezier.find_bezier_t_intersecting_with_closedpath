{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The intersection point "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "t"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is approximated by two parameters "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "t0"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": ", "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "t1"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " such that "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "t0"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " <= "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "t"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " <= "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "t1"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Search starts from "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "t0"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "t1"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and uses a simple bisecting algorithm therefore one of the end points must be inside the path while the other doesn't. The search stops when the distance of the points parametrized by "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "t0"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " and "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "t1"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " gets smaller than the given "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "tolerance"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "bezier_point_at_t",
            "type_": "callable",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A function returning x, y coordinates of the Bezier at parameter "
                      }
                    },
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "t"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". It must have the signature::      "
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "BlockVerbatim",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": "bezier_point_at_t(t: float) -> tuple[float, float]",
                        "_number": 0,
                        "_offset": 0
                      }
                    ]
                  }
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "inside_closedpath",
            "type_": "callable",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "A function returning True if a given point (x, y) is inside the closed path. It must have the signature::      "
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "BlockVerbatim",
                "data": {
                  "lines": {
                    "_lines": [
                      {
                        "_line": "inside_closedpath(point: tuple[float, float]) -> bool",
                        "_number": 0,
                        "_offset": 0
                      }
                    ]
                  }
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "t0, t1",
            "type_": "float",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Start parameters for the search."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "tolerance",
            "type_": "float",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Maximal allowed distance between the final points."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "t0, t1",
            "type_": "float",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The Bezier path parameters."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Find the intersection of the Bezier curve with a closed path."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns"
  ],
  "item_file": "/matplotlib/bezier.py",
  "item_line": 113,
  "item_type": "<class 'function'>",
  "aliases": [
    "matplotlib.bezier.find_bezier_t_intersecting_with_closedpath"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "3.5.0",
  "signature": "find_bezier_t_intersecting_with_closedpath(bezier_point_at_t, inside_closedpath, t0=0.0, t1=1.0, tolerance=0.01)",
  "references": null,
  "logo": "logo.png",
  "qa": "matplotlib.bezier.find_bezier_t_intersecting_with_closedpath",
  "arbitrary": []
}