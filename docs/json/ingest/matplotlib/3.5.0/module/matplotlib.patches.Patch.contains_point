{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The proper use of this method depends on the transform of the patch. Isolated patches do not have a transform. In this case, the patch creation coordinates and the point coordinates match. The following example checks that the center of a circle is within the circle"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> center = 0, 0",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": ">>> c = Circle(center, radius=1)",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": ">>> c.contains_point(center)",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": "True",
                  "_number": 3,
                  "_offset": 0
                }
              ]
            }
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The convention of checking against the transformed patch stems from the fact that this method is predominantly used to check if display coordinates (e.g. from mouse events) are within the patch. If you want to do the above check with data coordinates, you have to properly transform them first:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BlockVerbatim",
          "data": {
            "lines": {
              "_lines": [
                {
                  "_line": ">>> center = 0, 0",
                  "_number": 0,
                  "_offset": 0
                },
                {
                  "_line": ">>> c = Circle(center, radius=1)",
                  "_number": 1,
                  "_offset": 0
                },
                {
                  "_line": ">>> plt.gca().add_patch(c)",
                  "_number": 2,
                  "_offset": 0
                },
                {
                  "_line": ">>> transformed_center = c.get_transform().transform(center)",
                  "_number": 3,
                  "_offset": 0
                },
                {
                  "_line": ">>> c.contains_point(transformed_center)",
                  "_number": 4,
                  "_offset": 0
                },
                {
                  "_line": "True",
                  "_number": 5,
                  "_offset": 0
                }
              ]
            }
          }
        }
      ],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "point",
            "type_": "(float, float)",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "The point (x, y) to check, in target coordinates of "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "self.get_transform()"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". These are display coordinates for patches that are added to a figure or axes."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "radius",
            "type_": "float, optional",
            "desc": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Words",
                      "data": {
                        "value": "Add an additional margin on the patch in target coordinates of "
                      }
                    },
                    {
                      "type": "Verbatim",
                      "data": {
                        "value": [
                          "self.get_transform()"
                        ]
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ". See "
                      }
                    },
                    {
                      "type": "Link",
                      "data": {
                        "value": ".Path.contains_point",
                        "reference": {
                          "module": "matplotlib",
                          "version": "3.5.0",
                          "kind": "module",
                          "path": "matplotlib.path.Path.contains_point"
                        },
                        "kind": "module",
                        "exists": true
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": " for further details."
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "bool",
            "desc": []
          }
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Return whether the given point is inside the patch."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    {
      "module": "matplotlib",
      "version": "3.5.0",
      "kind": "module",
      "path": "matplotlib.path.Path.contains_point"
    }
  ],
  "ordered_sections": [
    "Summary",
    "Parameters",
    "Returns",
    "Notes"
  ],
  "item_file": "/matplotlib/patches.py",
  "item_line": 171,
  "item_type": "<class 'function'>",
  "aliases": [
    "matplotlib.legend.Patch.contains_point"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "3.5.0",
  "signature": "contains_point(self, point, radius=None)",
  "references": null,
  "logo": "logo.png",
  "qa": "matplotlib.patches.Patch.contains_point",
  "arbitrary": []
}