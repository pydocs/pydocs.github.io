{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The underlying storage is made up of two parallel numpy arrays:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BulletList",
          "data": {
            "value": [
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "vertices"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ": an Nx2 float array of vertices"
                      }
                    }
                  ],
                  "inner": []
                }
              },
              {
                "type": "Paragraph",
                "data": {
                  "inline": [
                    {
                      "type": "Emph",
                      "data": {
                        "value": {
                          "value": "codes"
                        }
                      }
                    },
                    {
                      "type": "Words",
                      "data": {
                        "value": ": an N-length uint8 array of path codes, or None"
                      }
                    }
                  ],
                  "inner": []
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "These two arrays always have the same length in the first dimension.  For example, to represent a cubic curve, you must provide three vertices and three "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "CURVE4"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " codes."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "The code types are:"
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "BulletList",
          "data": {
            "value": [
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "dt": {
                        "inline": [
                          {
                            "type": "Verbatim",
                            "data": {
                              "value": [
                                "STOP"
                              ]
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Verbatim",
                                "data": {
                                  "value": [
                                    "STOP"
                                  ]
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "BulletList",
          "data": {
            "value": [
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "dt": {
                        "inline": [
                          {
                            "type": "Verbatim",
                            "data": {
                              "value": [
                                "MOVETO"
                              ]
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Verbatim",
                                "data": {
                                  "value": [
                                    "MOVETO"
                                  ]
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "BulletList",
          "data": {
            "value": [
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "dt": {
                        "inline": [
                          {
                            "type": "Verbatim",
                            "data": {
                              "value": [
                                "LINETO"
                              ]
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Verbatim",
                                "data": {
                                  "value": [
                                    "LINETO"
                                  ]
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "BulletList",
          "data": {
            "value": [
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "dt": {
                        "inline": [
                          {
                            "type": "Verbatim",
                            "data": {
                              "value": [
                                "CURVE3"
                              ]
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Verbatim",
                                "data": {
                                  "value": [
                                    "CURVE3"
                                  ]
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "BulletList",
          "data": {
            "value": [
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "dt": {
                        "inline": [
                          {
                            "type": "Verbatim",
                            "data": {
                              "value": [
                                "CURVE4"
                              ]
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Verbatim",
                                "data": {
                                  "value": [
                                    "CURVE4"
                                  ]
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "BulletList",
          "data": {
            "value": [
              {
                "type": "DefList",
                "data": {
                  "children": [
                    {
                      "dt": {
                        "inline": [
                          {
                            "type": "Verbatim",
                            "data": {
                              "value": [
                                "CLOSEPOLY"
                              ]
                            }
                          }
                        ],
                        "inner": []
                      },
                      "dd": [
                        {
                          "type": "Paragraph",
                          "data": {
                            "inline": [
                              {
                                "type": "Verbatim",
                                "data": {
                                  "value": [
                                    "CLOSEPOLY"
                                  ]
                                }
                              }
                            ],
                            "inner": []
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "If "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "codes"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " is None, it is interpreted as a "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "MOVETO"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " followed by a series of "
                }
              },
              {
                "type": "Verbatim",
                "data": {
                  "value": [
                    "LINETO"
                  ]
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": "."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Users of Path objects should not access the vertices and codes arrays directly.  Instead, they should use "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "iter_segments",
                  "reference": {
                    "module": "matplotlib",
                    "version": "3.5.1",
                    "kind": "module",
                    "path": "matplotlib.path.Path.iter_segments"
                  },
                  "kind": "module",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " or "
                }
              },
              {
                "type": "Link",
                "data": {
                  "value": "cleaned",
                  "reference": {
                    "module": "matplotlib",
                    "version": "3.5.1",
                    "kind": "module",
                    "path": "matplotlib.path.Path.cleaned"
                  },
                  "kind": "module",
                  "exists": true
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " to get the vertex/code pairs.  This helps, in particular, to consistently handle the case of "
                }
              },
              {
                "type": "Emph",
                "data": {
                  "value": {
                    "value": "codes"
                  }
                }
              },
              {
                "type": "Words",
                "data": {
                  "value": " being None."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Some behavior of Path objects can be controlled by rcParams. See the rcParams whose keys start with 'path.'."
                }
              }
            ],
            "inner": []
          }
        },
        {
          "type": "Admonition",
          "data": {
            "kind": "note",
            "title": "",
            "children": [
              {
                "inline": [
                  {
                    "type": "Words",
                    "data": {
                      "value": "The vertices and codes arrays should be treated as immutable - - there are a number of optimizations and assumptions made up front in the constructor that will not change when the data changes. "
                    }
                  }
                ],
                "inner": []
              }
            ]
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "A series of possibly disconnected, possibly closed, line and curve segments."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [
    {
      "module": "matplotlib",
      "version": "3.5.1",
      "kind": "module",
      "path": "matplotlib.path.Path.iter_segments"
    },
    {
      "module": "matplotlib",
      "version": "3.5.1",
      "kind": "module",
      "path": "matplotlib.path.Path.cleaned"
    }
  ],
  "ordered_sections": [
    "Summary",
    "Extended Summary"
  ],
  "item_file": "/matplotlib/path.py",
  "item_line": 24,
  "item_type": "<class 'type'>",
  "aliases": [
    "matplotlib.transforms.Path"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "3.5.1",
  "signature": "Path(vertices, codes=None, _interpolation_steps=1, closed=False, readonly=False)",
  "references": null,
  "logo": "logo.png",
  "qa": "matplotlib.path.Path",
  "arbitrary": []
}