{
  "_content": {
    "Attributes": {
      "children": [],
      "title": null
    },
    "Extended Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Build the global Kff matrix in cco format. Build the full Ff vec Ff = - Kfc x Uc."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Methods": {
      "children": [],
      "title": null
    },
    "Notes": {
      "children": [],
      "title": null
    },
    "Other Parameters": {
      "children": [],
      "title": null
    },
    "Parameters": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "*J* is a (N x 2 x 2) array of jacobian matrices (jacobian matrix at",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "triangle first apex)",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "*ecc* is a (N x 3 x 1) array (array of column-matrices) of triangle",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "eccentricities",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "*triangles* is a (N x 3) array of nodes indexes.",
            "type_": "",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "*Uc* is (N x 3) array of imposed displacements at nodes",
            "type_": "",
            "desc": []
          }
        }
      ],
      "title": null
    },
    "Raises": {
      "children": [],
      "title": null
    },
    "Receives": {
      "children": [],
      "title": null
    },
    "Returns": {
      "children": [
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "(Kff_rows, Kff_cols, Kff_vals) Kff matrix in coo format - Duplicate",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "(row, col) entries must be summed.",
            "desc": []
          }
        },
        {
          "type": "Param",
          "data": {
            "param": "",
            "type_": "Ff: force vector - dim npts * 3",
            "desc": []
          }
        }
      ],
      "title": null
    },
    "Summary": {
      "children": [
        {
          "type": "Paragraph",
          "data": {
            "inline": [
              {
                "type": "Words",
                "data": {
                  "value": "Build K and F for the following elliptic formulation: minimization of curvature energy with value of function at node imposed and derivatives 'free'."
                }
              }
            ],
            "inner": []
          }
        }
      ],
      "title": null
    },
    "Warnings": {
      "children": [],
      "title": null
    },
    "Warns": {
      "children": [],
      "title": null
    },
    "Yields": {
      "children": [],
      "title": null
    }
  },
  "refs": [],
  "ordered_sections": [
    "Summary",
    "Extended Summary",
    "Parameters",
    "Returns"
  ],
  "item_file": "/matplotlib/tri/triinterpolate.py",
  "item_line": 914,
  "item_type": "<class 'function'>",
  "aliases": [
    "matplotlib.tri.triinterpolate._ReducedHCT_Element.get_Kff_and_Ff"
  ],
  "example_section_data": {
    "children": [],
    "title": null
  },
  "see_also": [],
  "version": "3.5.1",
  "signature": "get_Kff_and_Ff(self, J, ecc, triangles, Uc)",
  "references": null,
  "logo": "logo.png",
  "qa": "matplotlib.tri.triinterpolate._ReducedHCT_Element.get_Kff_and_Ff",
  "arbitrary": []
}